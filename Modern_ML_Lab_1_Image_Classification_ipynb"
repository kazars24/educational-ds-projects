{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Копия блокнота \"Modern_ML.Lab_1.Image_Classification.ipynb\"",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kazars24/educational-python-projects/blob/main/%D0%9A%D0%BE%D0%BF%D0%B8%D1%8F_%D0%B1%D0%BB%D0%BE%D0%BA%D0%BD%D0%BE%D1%82%D0%B0_%22Modern_ML_Lab_1_Image_Classification_ipynb%22.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JNsdgiPBL_bB"
      },
      "source": [
        "# <center> Майнор \"Интеллектуальный анализ данных\" </center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GRdwVV_aL_bK"
      },
      "source": [
        "# <center> Курс \"Современные методы машинного обучения\" </center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7UXBUnYAL_bO"
      },
      "source": [
        "# <center> Лабораторная работа №1. Image Classification. </center>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0aGkVgwcL_bQ"
      },
      "source": [
        "В данной лабораторной работе вам предлагается обучить модель на основе нейронной сети для распознавания рукописных букв английского алфавита."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w18OZWZoL_bS"
      },
      "source": [
        "## Данные"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_FBT-gklL_bT"
      },
      "source": [
        "Данные представлены двумя датасетами: обучающим (`train`) и тестовым (`test`). Изображения для каждого датасета находятся в `images.zip`.  \n",
        "  \n",
        "Обучающая выборка состоит из 65000 изображений - по 2500 изображений для каждой буквы.  \n",
        "Тестовая выборка состоит из 13000 изображений - по 500 изображений для каждой буквы.  \n",
        "  \n",
        "Все изображения - монохромные (но в формате RGB), размерности $28 \\times 28$ пикселей, в формате JPEG. \n",
        "В названии каждого файла содержатся буква, которая представлена на изображении, и уникальный номер изображения: `a_00002.jpg`.  \n",
        "  \n",
        "**NB:** Все изображения представлены в перевернутом виде, для корректного отображения их нужно сначала транспонировать. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hSnMx2hHNQwP",
        "outputId": "51a7cd96-77de-44aa-a16d-489de7709acd"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fpLMrSx7NS1v"
      },
      "source": [
        "! unzip /content/drive/MyDrive/images.zip"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-K2mzo69L_bW"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X4g7cBO8L_bi",
        "outputId": "dc0960cf-b8ae-4ed8-8ef0-3d00c298f874"
      },
      "source": [
        "pic = plt.imread('train/a/a_00002.jpg')\n",
        "print(pic.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(28, 28, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PZ-9muXzL_bm"
      },
      "source": [
        "pic = np.transpose(pic, axes=(1, 0, 2))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "7V6ZoI7pL_bp",
        "outputId": "1a1557df-2946-44fa-9a8f-2c19ae184bb6"
      },
      "source": [
        "plt.figure(figsize=(2,2))\n",
        "plt.imshow(pic)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 144x144 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xMGbdWKPL_bt"
      },
      "source": [
        "## Основные задания"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K0BYW85GL_b0"
      },
      "source": [
        "Ваша задача - создать и обучить модель на основе нейронной сети, которая будет предсказывать букву на картинке.  \n",
        "Обучение необходимо проводить на данных из `train`, качество модели проверять на данных из `test`.  \n",
        "Целевая метрика - accuracy.  \n",
        "Для моделирования необходимо использовать `pytorch`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QRiVaZMOL_b1"
      },
      "source": [
        "### Задание 1  \n",
        "  \n",
        "*Вес в общей оценке - 0.35*  \n",
        "  \n",
        "1. Постройте и обучите модели с 2-мя и 3-мя полносвязными (dense) скрытыми слоями.  \n",
        "При моделировании необходимо попробовать разные параметры нейронной сети - число нейронов на каждом слое, learning rate, batch size, функции активации, регуляризации и т.д. Оцените качество моделей с различными параметрами, проведите сравнительный анализ. \n",
        "2. Для наилучшей модели постройте confusion matrix результатов предсказаний модели на тестовых данных.  \n",
        "Насколько равномерно обучилась ваша модель? Приведите буквы с самой лучшей и с самой худшей точностью детекции.\n",
        "3. Найдите 10 пар букв, которые чаще всего путаются между собой, дайте возможное объяснение. Приведите примеры с картинками, которые были детектированы с ошибкой.\n",
        "4. Возьмите первую букву вашей фамилии и укажите её точность детекции. С какими буквами ваша модель чаще всего путает эту букву?     "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eTx-KKKyqzst"
      },
      "source": [
        "####Часть 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nDGH6ArTXMqz"
      },
      "source": [
        "Для начала простоим модели с 2-мя и 3-мя полносвязными слоями, batch_size=2 и оптимайзером SGD с параметрами lr=0.0001, momentum=0.9"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dWtQcKBsO89V"
      },
      "source": [
        "import torch\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ROWZNY5vQmX7"
      },
      "source": [
        "transform = transforms.Compose(\n",
        "    [transforms.ToTensor()])\n",
        "\n",
        "train_data = torchvision.datasets.ImageFolder(root='train', transform=transform)\n",
        "test_data = torchvision.datasets.ImageFolder(root = 'test', transform=transform)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fEwf-JBkKPxi"
      },
      "source": [
        "Train часть разделим на *train* и *valid*, так как test уже имеется."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V8MIi5WOZSCF"
      },
      "source": [
        "from torch.utils.data.sampler import SubsetRandomSampler\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "image_train_range = list(range(len(train_data.imgs)))\n",
        "\n",
        "train, valid = train_test_split(image_train_range, test_size=.2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pNoMEeQOZ4Sq",
        "outputId": "bf6b6153-4b46-4548-eab1-612ec6dbdd2b"
      },
      "source": [
        "len(train), len(valid)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(52000, 13000)"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bd5Ub10TZMGI"
      },
      "source": [
        "train_loader = torch.utils.data.DataLoader(train_data, batch_size=2, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(train))\n",
        "valid_loader = torch.utils.data.DataLoader(train_data, batch_size=2, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(valid))\n",
        "test_loader = torch.utils.data.DataLoader(test_data, batch_size=2,\n",
        "                                          shuffle=True, num_workers=2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "j-_8b1sVZ8Mn",
        "outputId": "b2fe7afb-5fd2-4433-c66c-8465868611b1"
      },
      "source": [
        "def imshow(img):\n",
        "    npimg = img.numpy()\n",
        "    plt.imshow(np.transpose(npimg, (2, 1, 0)))\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "# get some random training images\n",
        "dataiter = iter(train_loader)\n",
        "images, labels = dataiter.next()\n",
        "\n",
        "# show images\n",
        "imshow(torchvision.utils.make_grid(images))\n",
        "# print labels\n",
        "print(' '.join('%5s' % train_data.classes[labels[j]] for j in range(2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    n     p\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s5tLg4nmo4C7",
        "outputId": "ee8423c6-325a-4eed-a340-b199cd076f25"
      },
      "source": [
        "len(train_data.classes)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "26"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BrwlATqPpCq1"
      },
      "source": [
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "class Net_2(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_2, self).__init__()#28*28\n",
        "        self.fc1 = nn.Linear(3 *28 * 28, 56)\n",
        "        self.fc2 = nn.Linear(56, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = x.view(-1, 3 *28 * 28)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_2 = Net_2()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N7Nk5HyZvTmX"
      },
      "source": [
        "import torch.optim as optim\n",
        "\n",
        "criterion = nn.CrossEntropyLoss()# for classification\n",
        "optimizer = optim.SGD(net_2.parameters(), lr=0.0001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3mhDAmFsvuMd"
      },
      "source": [
        "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Sqf-JiKvyNl",
        "outputId": "5a7bab50-6bce-4bc4-f5b9-c32d9a22ed7b"
      },
      "source": [
        "for epoch in range(3):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_2(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[1,   500] loss: 3.207\n",
            "[1,  1000] loss: 3.091\n",
            "[1,  1500] loss: 2.982\n",
            "[1,  2000] loss: 2.845\n",
            "[1,  2500] loss: 2.682\n",
            "[1,  3000] loss: 2.514\n",
            "[1,  3500] loss: 2.411\n",
            "[1,  4000] loss: 2.204\n",
            "[1,  4500] loss: 2.082\n",
            "[1,  5000] loss: 1.956\n",
            "[1,  5500] loss: 1.926\n",
            "[1,  6000] loss: 1.796\n",
            "[1,  6500] loss: 1.767\n",
            "[1,  7000] loss: 1.700\n",
            "[1,  7500] loss: 1.636\n",
            "[1,  8000] loss: 1.658\n",
            "[1,  8500] loss: 1.558\n",
            "[1,  9000] loss: 1.519\n",
            "[1,  9500] loss: 1.478\n",
            "[1, 10000] loss: 1.516\n",
            "[1, 10500] loss: 1.415\n",
            "[1, 11000] loss: 1.462\n",
            "[1, 11500] loss: 1.433\n",
            "[1, 12000] loss: 1.426\n",
            "[1, 12500] loss: 1.407\n",
            "[1, 13000] loss: 1.382\n",
            "[1, 13500] loss: 1.308\n",
            "[1, 14000] loss: 1.261\n",
            "[1, 14500] loss: 1.289\n",
            "[1, 15000] loss: 1.362\n",
            "[1, 15500] loss: 1.290\n",
            "[1, 16000] loss: 1.223\n",
            "[1, 16500] loss: 1.297\n",
            "[1, 17000] loss: 1.272\n",
            "[1, 17500] loss: 1.217\n",
            "[1, 18000] loss: 1.345\n",
            "[1, 18500] loss: 1.215\n",
            "[1, 19000] loss: 1.246\n",
            "[1, 19500] loss: 1.199\n",
            "[1, 20000] loss: 1.256\n",
            "[1, 20500] loss: 1.199\n",
            "[1, 21000] loss: 1.260\n",
            "[1, 21500] loss: 1.212\n",
            "[1, 22000] loss: 1.253\n",
            "[1, 22500] loss: 1.184\n",
            "[1, 23000] loss: 1.150\n",
            "[1, 23500] loss: 1.144\n",
            "[1, 24000] loss: 1.204\n",
            "[1, 24500] loss: 1.236\n",
            "[1, 25000] loss: 1.174\n",
            "[1, 25500] loss: 1.185\n",
            "[1, 26000] loss: 1.195\n",
            "[2,   500] loss: 1.090\n",
            "[2,  1000] loss: 1.158\n",
            "[2,  1500] loss: 1.181\n",
            "[2,  2000] loss: 1.177\n",
            "[2,  2500] loss: 1.109\n",
            "[2,  3000] loss: 1.137\n",
            "[2,  3500] loss: 1.130\n",
            "[2,  4000] loss: 1.129\n",
            "[2,  4500] loss: 1.148\n",
            "[2,  5000] loss: 1.073\n",
            "[2,  5500] loss: 1.133\n",
            "[2,  6000] loss: 1.092\n",
            "[2,  6500] loss: 1.054\n",
            "[2,  7000] loss: 1.142\n",
            "[2,  7500] loss: 1.146\n",
            "[2,  8000] loss: 1.009\n",
            "[2,  8500] loss: 1.143\n",
            "[2,  9000] loss: 1.059\n",
            "[2,  9500] loss: 1.124\n",
            "[2, 10000] loss: 1.139\n",
            "[2, 10500] loss: 1.088\n",
            "[2, 11000] loss: 1.053\n",
            "[2, 11500] loss: 1.019\n",
            "[2, 12000] loss: 1.022\n",
            "[2, 12500] loss: 1.114\n",
            "[2, 13000] loss: 1.039\n",
            "[2, 13500] loss: 1.080\n",
            "[2, 14000] loss: 1.116\n",
            "[2, 14500] loss: 0.967\n",
            "[2, 15000] loss: 1.055\n",
            "[2, 15500] loss: 1.021\n",
            "[2, 16000] loss: 1.003\n",
            "[2, 16500] loss: 1.045\n",
            "[2, 17000] loss: 0.993\n",
            "[2, 17500] loss: 1.078\n",
            "[2, 18000] loss: 0.995\n",
            "[2, 18500] loss: 0.910\n",
            "[2, 19000] loss: 1.027\n",
            "[2, 19500] loss: 0.964\n",
            "[2, 20000] loss: 0.963\n",
            "[2, 20500] loss: 1.053\n",
            "[2, 21000] loss: 0.979\n",
            "[2, 21500] loss: 1.003\n",
            "[2, 22000] loss: 1.019\n",
            "[2, 22500] loss: 0.973\n",
            "[2, 23000] loss: 0.943\n",
            "[2, 23500] loss: 0.975\n",
            "[2, 24000] loss: 0.965\n",
            "[2, 24500] loss: 0.992\n",
            "[2, 25000] loss: 1.007\n",
            "[2, 25500] loss: 0.948\n",
            "[2, 26000] loss: 0.960\n",
            "[3,   500] loss: 0.931\n",
            "[3,  1000] loss: 1.023\n",
            "[3,  1500] loss: 0.941\n",
            "[3,  2000] loss: 0.955\n",
            "[3,  2500] loss: 0.938\n",
            "[3,  3000] loss: 0.874\n",
            "[3,  3500] loss: 0.890\n",
            "[3,  4000] loss: 0.905\n",
            "[3,  4500] loss: 0.917\n",
            "[3,  5000] loss: 0.944\n",
            "[3,  5500] loss: 0.891\n",
            "[3,  6000] loss: 0.920\n",
            "[3,  6500] loss: 0.973\n",
            "[3,  7000] loss: 0.952\n",
            "[3,  7500] loss: 0.931\n",
            "[3,  8000] loss: 0.978\n",
            "[3,  8500] loss: 0.877\n",
            "[3,  9000] loss: 0.905\n",
            "[3,  9500] loss: 0.966\n",
            "[3, 10000] loss: 0.875\n",
            "[3, 10500] loss: 0.953\n",
            "[3, 11000] loss: 0.899\n",
            "[3, 11500] loss: 0.939\n",
            "[3, 12000] loss: 0.841\n",
            "[3, 12500] loss: 0.796\n",
            "[3, 13000] loss: 0.924\n",
            "[3, 13500] loss: 0.903\n",
            "[3, 14000] loss: 0.907\n",
            "[3, 14500] loss: 0.864\n",
            "[3, 15000] loss: 0.940\n",
            "[3, 15500] loss: 0.884\n",
            "[3, 16000] loss: 0.931\n",
            "[3, 16500] loss: 0.853\n",
            "[3, 17000] loss: 0.862\n",
            "[3, 17500] loss: 0.834\n",
            "[3, 18000] loss: 0.854\n",
            "[3, 18500] loss: 0.856\n",
            "[3, 19000] loss: 0.825\n",
            "[3, 19500] loss: 0.847\n",
            "[3, 20000] loss: 0.855\n",
            "[3, 20500] loss: 0.861\n",
            "[3, 21000] loss: 0.828\n",
            "[3, 21500] loss: 0.883\n",
            "[3, 22000] loss: 0.831\n",
            "[3, 22500] loss: 0.804\n",
            "[3, 23000] loss: 0.971\n",
            "[3, 23500] loss: 0.874\n",
            "[3, 24000] loss: 0.845\n",
            "[3, 24500] loss: 0.845\n",
            "[3, 25000] loss: 0.851\n",
            "[3, 25500] loss: 0.836\n",
            "[3, 26000] loss: 0.767\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i1bLic52gzEM"
      },
      "source": [
        "#PATH = './1_net_2.pth'\n",
        "#torch.save(net_2.state_dict(), PATH)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0B_hD4_qXSTD"
      },
      "source": [
        "def valid_accuracy(model):\n",
        "  correct = 0\n",
        "  total = 0\n",
        "  with torch.no_grad():\n",
        "    for data in valid_loader:\n",
        "      images, labels = data\n",
        "      outputs = model(images)\n",
        "      _, predicted = torch.max(outputs.data, 1)\n",
        "      total += labels.size(0)\n",
        "      correct += (predicted == labels).sum().item()\n",
        "\n",
        "  print('Accuracy of the network on the valid images: %d %%' % (\n",
        "    100 * correct / total))\n",
        "\n",
        "def test_accuracy(model):\n",
        "  correct = 0\n",
        "  total = 0\n",
        "  with torch.no_grad():\n",
        "    for data in test_loader:\n",
        "        images, labels = data\n",
        "        outputs = model(images)\n",
        "        _, predicted = torch.max(outputs.data, 1)\n",
        "        total += labels.size(0)\n",
        "        correct += (predicted == labels).sum().item()\n",
        "\n",
        "  print('Accuracy of the network on the test images: %d %%' % (\n",
        "    100 * correct / total))\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aTAAMVjwYu5d",
        "outputId": "314f6f03-8b04-432b-9642-59455f0980a0"
      },
      "source": [
        "valid_accuracy(net_2)\n",
        "test_accuracy(net_2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the valid images: 76 %\n",
            "Accuracy of the network on the test images: 76 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sg-1tVymiCw9"
      },
      "source": [
        "Теперь то же самое для модели с 3-мя слоями"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bFWVUk-mh_d5"
      },
      "source": [
        "class Net_3(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_3, self).__init__()#28*28\n",
        "        self.fc1 = nn.Linear(3 *28 * 28, 56)\n",
        "        self.fc2 = nn.Linear(56, 40)\n",
        "        self.fc3 = nn.Linear(40, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = x.view(-1, 3 *28 * 28)\n",
        "        x = self.fc1(x)\n",
        "        x = self.fc2(x)\n",
        "        x = F.relu(self.fc3(x))\n",
        "        return x\n",
        "\n",
        "net_3 = Net_3()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fh0LWQsIi6Nb"
      },
      "source": [
        "optimizer = optim.SGD(net_3.parameters(), lr=0.0001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GfqFk6hGi8Bc",
        "outputId": "0d9ddaa2-b98f-44a8-c9a1-31f303a5b2d3"
      },
      "source": [
        "for epoch in range(3):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_3(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[1,   500] loss: 3.247\n",
            "[1,  1000] loss: 3.207\n",
            "[1,  1500] loss: 3.158\n",
            "[1,  2000] loss: 3.114\n",
            "[1,  2500] loss: 3.052\n",
            "[1,  3000] loss: 2.988\n",
            "[1,  3500] loss: 2.931\n",
            "[1,  4000] loss: 2.820\n",
            "[1,  4500] loss: 2.728\n",
            "[1,  5000] loss: 2.612\n",
            "[1,  5500] loss: 2.475\n",
            "[1,  6000] loss: 2.407\n",
            "[1,  6500] loss: 2.322\n",
            "[1,  7000] loss: 2.224\n",
            "[1,  7500] loss: 2.155\n",
            "[1,  8000] loss: 2.076\n",
            "[1,  8500] loss: 2.021\n",
            "[1,  9000] loss: 1.968\n",
            "[1,  9500] loss: 1.939\n",
            "[1, 10000] loss: 1.895\n",
            "[1, 10500] loss: 1.811\n",
            "[1, 11000] loss: 1.756\n",
            "[1, 11500] loss: 1.796\n",
            "[1, 12000] loss: 1.634\n",
            "[1, 12500] loss: 1.630\n",
            "[1, 13000] loss: 1.607\n",
            "[1, 13500] loss: 1.609\n",
            "[1, 14000] loss: 1.501\n",
            "[1, 14500] loss: 1.570\n",
            "[1, 15000] loss: 1.605\n",
            "[1, 15500] loss: 1.573\n",
            "[1, 16000] loss: 1.473\n",
            "[1, 16500] loss: 1.470\n",
            "[1, 17000] loss: 1.586\n",
            "[1, 17500] loss: 1.441\n",
            "[1, 18000] loss: 1.544\n",
            "[1, 18500] loss: 1.472\n",
            "[1, 19000] loss: 1.495\n",
            "[1, 19500] loss: 1.431\n",
            "[1, 20000] loss: 1.356\n",
            "[1, 20500] loss: 1.398\n",
            "[1, 21000] loss: 1.415\n",
            "[1, 21500] loss: 1.478\n",
            "[1, 22000] loss: 1.393\n",
            "[1, 22500] loss: 1.384\n",
            "[1, 23000] loss: 1.467\n",
            "[1, 23500] loss: 1.292\n",
            "[1, 24000] loss: 1.389\n",
            "[1, 24500] loss: 1.376\n",
            "[1, 25000] loss: 1.328\n",
            "[1, 25500] loss: 1.352\n",
            "[1, 26000] loss: 1.298\n",
            "[2,   500] loss: 1.424\n",
            "[2,  1000] loss: 1.374\n",
            "[2,  1500] loss: 1.392\n",
            "[2,  2000] loss: 1.286\n",
            "[2,  2500] loss: 1.278\n",
            "[2,  3000] loss: 1.338\n",
            "[2,  3500] loss: 1.250\n",
            "[2,  4000] loss: 1.325\n",
            "[2,  4500] loss: 1.348\n",
            "[2,  5000] loss: 1.393\n",
            "[2,  5500] loss: 1.343\n",
            "[2,  6000] loss: 1.264\n",
            "[2,  6500] loss: 1.293\n",
            "[2,  7000] loss: 1.270\n",
            "[2,  7500] loss: 1.224\n",
            "[2,  8000] loss: 1.296\n",
            "[2,  8500] loss: 1.314\n",
            "[2,  9000] loss: 1.339\n",
            "[2,  9500] loss: 1.286\n",
            "[2, 10000] loss: 1.356\n",
            "[2, 10500] loss: 1.338\n",
            "[2, 11000] loss: 1.225\n",
            "[2, 11500] loss: 1.252\n",
            "[2, 12000] loss: 1.248\n",
            "[2, 12500] loss: 1.131\n",
            "[2, 13000] loss: 1.165\n",
            "[2, 13500] loss: 1.194\n",
            "[2, 14000] loss: 1.165\n",
            "[2, 14500] loss: 1.112\n",
            "[2, 15000] loss: 1.156\n",
            "[2, 15500] loss: 1.160\n",
            "[2, 16000] loss: 1.136\n",
            "[2, 16500] loss: 1.139\n",
            "[2, 17000] loss: 1.195\n",
            "[2, 17500] loss: 1.213\n",
            "[2, 18000] loss: 1.135\n",
            "[2, 18500] loss: 1.129\n",
            "[2, 19000] loss: 1.025\n",
            "[2, 19500] loss: 1.176\n",
            "[2, 20000] loss: 1.140\n",
            "[2, 20500] loss: 1.228\n",
            "[2, 21000] loss: 1.118\n",
            "[2, 21500] loss: 1.127\n",
            "[2, 22000] loss: 1.192\n",
            "[2, 22500] loss: 1.208\n",
            "[2, 23000] loss: 1.149\n",
            "[2, 23500] loss: 1.117\n",
            "[2, 24000] loss: 1.104\n",
            "[2, 24500] loss: 1.110\n",
            "[2, 25000] loss: 1.165\n",
            "[2, 25500] loss: 1.123\n",
            "[2, 26000] loss: 1.211\n",
            "[3,   500] loss: 1.149\n",
            "[3,  1000] loss: 1.188\n",
            "[3,  1500] loss: 1.122\n",
            "[3,  2000] loss: 1.170\n",
            "[3,  2500] loss: 1.146\n",
            "[3,  3000] loss: 1.172\n",
            "[3,  3500] loss: 1.010\n",
            "[3,  4000] loss: 1.051\n",
            "[3,  4500] loss: 1.117\n",
            "[3,  5000] loss: 1.031\n",
            "[3,  5500] loss: 1.115\n",
            "[3,  6000] loss: 1.147\n",
            "[3,  6500] loss: 0.994\n",
            "[3,  7000] loss: 1.102\n",
            "[3,  7500] loss: 1.083\n",
            "[3,  8000] loss: 1.142\n",
            "[3,  8500] loss: 1.108\n",
            "[3,  9000] loss: 0.997\n",
            "[3,  9500] loss: 1.102\n",
            "[3, 10000] loss: 1.098\n",
            "[3, 10500] loss: 1.159\n",
            "[3, 11000] loss: 1.059\n",
            "[3, 11500] loss: 1.058\n",
            "[3, 12000] loss: 1.153\n",
            "[3, 12500] loss: 1.103\n",
            "[3, 13000] loss: 1.111\n",
            "[3, 13500] loss: 0.990\n",
            "[3, 14000] loss: 1.124\n",
            "[3, 14500] loss: 1.105\n",
            "[3, 15000] loss: 1.121\n",
            "[3, 15500] loss: 1.123\n",
            "[3, 16000] loss: 1.056\n",
            "[3, 16500] loss: 1.109\n",
            "[3, 17000] loss: 1.098\n",
            "[3, 17500] loss: 1.140\n",
            "[3, 18000] loss: 1.073\n",
            "[3, 18500] loss: 1.083\n",
            "[3, 19000] loss: 1.104\n",
            "[3, 19500] loss: 1.131\n",
            "[3, 20000] loss: 1.119\n",
            "[3, 20500] loss: 1.020\n",
            "[3, 21000] loss: 1.140\n",
            "[3, 21500] loss: 1.022\n",
            "[3, 22000] loss: 1.080\n",
            "[3, 22500] loss: 1.059\n",
            "[3, 23000] loss: 1.071\n",
            "[3, 23500] loss: 1.169\n",
            "[3, 24000] loss: 1.170\n",
            "[3, 24500] loss: 1.054\n",
            "[3, 25000] loss: 1.210\n",
            "[3, 25500] loss: 1.060\n",
            "[3, 26000] loss: 1.101\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l3THivT7096U"
      },
      "source": [
        "#PATH = './1_net_3.pth'\n",
        "#torch.save(net_3.state_dict(), PATH)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3oUDA1zdbFEE",
        "outputId": "29bf67a9-d856-4a9a-ad8e-8607cf51d2fa"
      },
      "source": [
        "valid_accuracy(net_3)\n",
        "test_accuracy(net_3)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the valid images: 68 %\n",
            "Accuracy of the network on the test images: 68 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i9UJB4u51_m1"
      },
      "source": [
        "Модель с 2-мя слоями справилась лучше, поэтому на ее основе будем пробовать различные параметры нейронной сети.\n",
        "\n",
        "Например, добавим нормализацию, изменим кол-во нейронов на слоях, добавим функцию активации, попробуем разные оптимайзеры и тд."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qhLjmsXQ3uvA"
      },
      "source": [
        "transform = transforms.Compose(\n",
        "    [transforms.ToTensor(),\n",
        "     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n",
        "\n",
        "train_data = torchvision.datasets.ImageFolder(root='train', transform=transform)\n",
        "test_data = torchvision.datasets.ImageFolder(root = 'test', transform=transform)\n",
        "\n",
        "image_train_range = list(range(len(train_data.imgs)))\n",
        "train, valid = train_test_split(image_train_range, test_size=.2)\n",
        "\n",
        "train_loader = torch.utils.data.DataLoader(train_data, batch_size=4, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(train))\n",
        "valid_loader = torch.utils.data.DataLoader(train_data, batch_size=4, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(valid))\n",
        "test_loader = torch.utils.data.DataLoader(test_data, batch_size=4,\n",
        "                                          shuffle=True, num_workers=2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YRGsEpPb9y2a"
      },
      "source": [
        "class Net_4(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_4, self).__init__()#28*28\n",
        "        self.fc1 = nn.Linear(3 * 28 * 28, 64)\n",
        "        self.fc2 = nn.Linear(64, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = x.view(-1, 3 * 28 * 28)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_4 = Net_4()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SzMSbVu5-bmz"
      },
      "source": [
        "optimizer = optim.Adam(net_4.parameters(), lr=0.0001)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b431LHPU-5RK",
        "outputId": "83c711fa-bde0-4cc4-8ea8-5ced99531a4c"
      },
      "source": [
        "for epoch in range(3):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_4(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[1,   500] loss: 2.713\n",
            "[1,  1000] loss: 1.997\n",
            "[1,  1500] loss: 1.726\n",
            "[1,  2000] loss: 1.552\n",
            "[1,  2500] loss: 1.436\n",
            "[1,  3000] loss: 1.415\n",
            "[1,  3500] loss: 1.301\n",
            "[1,  4000] loss: 1.316\n",
            "[1,  4500] loss: 1.292\n",
            "[1,  5000] loss: 1.296\n",
            "[1,  5500] loss: 1.250\n",
            "[1,  6000] loss: 1.249\n",
            "[1,  6500] loss: 1.184\n",
            "[1,  7000] loss: 1.184\n",
            "[1,  7500] loss: 1.106\n",
            "[1,  8000] loss: 1.181\n",
            "[1,  8500] loss: 1.137\n",
            "[1,  9000] loss: 1.079\n",
            "[1,  9500] loss: 1.074\n",
            "[1, 10000] loss: 1.056\n",
            "[1, 10500] loss: 1.155\n",
            "[1, 11000] loss: 1.082\n",
            "[1, 11500] loss: 1.118\n",
            "[1, 12000] loss: 1.083\n",
            "[1, 12500] loss: 1.057\n",
            "[1, 13000] loss: 1.065\n",
            "[2,   500] loss: 1.026\n",
            "[2,  1000] loss: 1.051\n",
            "[2,  1500] loss: 1.044\n",
            "[2,  2000] loss: 0.938\n",
            "[2,  2500] loss: 0.988\n",
            "[2,  3000] loss: 0.929\n",
            "[2,  3500] loss: 0.979\n",
            "[2,  4000] loss: 1.020\n",
            "[2,  4500] loss: 0.982\n",
            "[2,  5000] loss: 0.947\n",
            "[2,  5500] loss: 0.956\n",
            "[2,  6000] loss: 0.951\n",
            "[2,  6500] loss: 0.942\n",
            "[2,  7000] loss: 0.909\n",
            "[2,  7500] loss: 0.947\n",
            "[2,  8000] loss: 0.972\n",
            "[2,  8500] loss: 0.911\n",
            "[2,  9000] loss: 0.951\n",
            "[2,  9500] loss: 0.876\n",
            "[2, 10000] loss: 0.907\n",
            "[2, 10500] loss: 0.864\n",
            "[2, 11000] loss: 0.847\n",
            "[2, 11500] loss: 0.851\n",
            "[2, 12000] loss: 0.877\n",
            "[2, 12500] loss: 0.858\n",
            "[2, 13000] loss: 0.846\n",
            "[3,   500] loss: 0.820\n",
            "[3,  1000] loss: 0.831\n",
            "[3,  1500] loss: 0.857\n",
            "[3,  2000] loss: 0.808\n",
            "[3,  2500] loss: 0.791\n",
            "[3,  3000] loss: 0.849\n",
            "[3,  3500] loss: 0.826\n",
            "[3,  4000] loss: 0.824\n",
            "[3,  4500] loss: 0.826\n",
            "[3,  5000] loss: 0.800\n",
            "[3,  5500] loss: 0.783\n",
            "[3,  6000] loss: 0.789\n",
            "[3,  6500] loss: 0.794\n",
            "[3,  7000] loss: 0.816\n",
            "[3,  7500] loss: 0.823\n",
            "[3,  8000] loss: 0.749\n",
            "[3,  8500] loss: 0.805\n",
            "[3,  9000] loss: 0.749\n",
            "[3,  9500] loss: 0.751\n",
            "[3, 10000] loss: 0.750\n",
            "[3, 10500] loss: 0.733\n",
            "[3, 11000] loss: 0.761\n",
            "[3, 11500] loss: 0.739\n",
            "[3, 12000] loss: 0.742\n",
            "[3, 12500] loss: 0.730\n",
            "[3, 13000] loss: 0.733\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ux5s7SSAczwu",
        "outputId": "a1c4ea08-18df-4f26-da01-989c31776915"
      },
      "source": [
        "valid_accuracy(net_4)\n",
        "test_accuracy(net_4)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the valid images: 77 %\n",
            "Accuracy of the network on the test images: 76 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bVIs4rb-dalL"
      },
      "source": [
        "train_loader = torch.utils.data.DataLoader(train_data, batch_size=8, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(train))\n",
        "valid_loader = torch.utils.data.DataLoader(train_data, batch_size=8, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(valid))\n",
        "test_loader = torch.utils.data.DataLoader(test_data, batch_size=8,\n",
        "                                          shuffle=True, num_workers=2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qBk8TgZcCGiK"
      },
      "source": [
        "class Net_5(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_5, self).__init__()#28*28\n",
        "        self.fc1 = nn.Linear(3 * 28 * 28, 52)\n",
        "        self.dropout = nn.Dropout(0.1)\n",
        "        self.fc2 = nn.Linear(52, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = x.view(-1, 3 * 28 * 28)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.dropout(x)\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_5 = Net_5()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "te4DJ7QlCYqN"
      },
      "source": [
        "optimizer = optim.SGD(net_5.parameters(), lr=0.0002, momentum=0.95)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cdN6cH6sE8we",
        "outputId": "ba60fefc-9b95-44e5-9595-8fec506adcff"
      },
      "source": [
        "for epoch in range(3):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_5(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[1,   500] loss: 2.795\n",
            "[1,  1000] loss: 1.979\n",
            "[1,  1500] loss: 1.683\n",
            "[1,  2000] loss: 1.497\n",
            "[1,  2500] loss: 1.377\n",
            "[1,  3000] loss: 1.383\n",
            "[1,  3500] loss: 1.340\n",
            "[1,  4000] loss: 1.326\n",
            "[1,  4500] loss: 1.227\n",
            "[1,  5000] loss: 1.259\n",
            "[1,  5500] loss: 1.190\n",
            "[1,  6000] loss: 1.161\n",
            "[1,  6500] loss: 1.157\n",
            "[2,   500] loss: 1.111\n",
            "[2,  1000] loss: 1.104\n",
            "[2,  1500] loss: 1.071\n",
            "[2,  2000] loss: 1.096\n",
            "[2,  2500] loss: 1.047\n",
            "[2,  3000] loss: 1.023\n",
            "[2,  3500] loss: 1.021\n",
            "[2,  4000] loss: 0.959\n",
            "[2,  4500] loss: 1.024\n",
            "[2,  5000] loss: 1.004\n",
            "[2,  5500] loss: 0.989\n",
            "[2,  6000] loss: 0.968\n",
            "[2,  6500] loss: 0.958\n",
            "[3,   500] loss: 0.938\n",
            "[3,  1000] loss: 0.929\n",
            "[3,  1500] loss: 0.890\n",
            "[3,  2000] loss: 0.942\n",
            "[3,  2500] loss: 0.874\n",
            "[3,  3000] loss: 0.910\n",
            "[3,  3500] loss: 0.919\n",
            "[3,  4000] loss: 0.880\n",
            "[3,  4500] loss: 0.882\n",
            "[3,  5000] loss: 0.877\n",
            "[3,  5500] loss: 0.849\n",
            "[3,  6000] loss: 0.882\n",
            "[3,  6500] loss: 0.883\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r8vKrVk0QkaN"
      },
      "source": [
        "#PATH = './1_net_5.pth'\n",
        "#torch.save(net_5.state_dict(), PATH)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GaQkSuJueZPM",
        "outputId": "70f9fed7-1393-4bcf-82ef-e97b17ab7153"
      },
      "source": [
        "valid_accuracy(net_5)\n",
        "test_accuracy(net_5)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the valid images: 74 %\n",
            "Accuracy of the network on the test images: 73 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y1YSeFbuibrz"
      },
      "source": [
        "Net_4 справилась лучше всех с точностью 77% и 78% на валидационной и тестовой выборках соответственно"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TyozxzlbuOcF"
      },
      "source": [
        "####Часть 2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9-2vlQDPRdZ5"
      },
      "source": [
        "size = len(test_loader.dataset)\n",
        "correct = 0\n",
        "total = 0\n",
        "prediction = []\n",
        "ground_truth = []\n",
        "with torch.no_grad():\n",
        "  for images, labels in test_loader:\n",
        "    outputs = net_4(images)\n",
        "    _, predicted = torch.max(outputs, 1)\n",
        "    prediction.extend(predicted)\n",
        "    ground_truth.extend(labels)\n",
        "    total += labels.size(0)\n",
        "    correct += (predicted == labels).sum().item()\n",
        "pred = list(map(lambda x : test_data.classes[x], prediction))\n",
        "gt = list(map(lambda x : test_data.classes[x], ground_truth))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 880
        },
        "id": "y9V0eMk1-k9e",
        "outputId": "9b65e358-dab8-4dfd-a355-1b02fcd81561"
      },
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n",
        "\n",
        "cm = confusion_matrix(gt, pred)\n",
        "\n",
        "plt.figure(figsize=(15, 15))\n",
        "sns.heatmap(cm, annot=True, cbar=False, xticklabels=test_data.classes, yticklabels=test_data.classes)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f27838ec210>"
            ]
          },
          "execution_count": 54,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x1080 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 935
        },
        "id": "Jsb8aLLaH5Gd",
        "outputId": "1267e316-1f11-48ad-845b-daacb0d33942"
      },
      "source": [
        "plt.figure(figsize=(16, 16))\n",
        "letters = [cm[i][i] for i in range(26)]\n",
        "plt.bar(test_data.classes, letters)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<BarContainer object of 26 artists>"
            ]
          },
          "execution_count": 55,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x1152 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f6rminSTLRX8"
      },
      "source": [
        "В целом, модель обучилась  не очень равномерно, есть несколько букв, которые часто путаются между собой. Далее найдем эти буквы."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xF5ZYb5WL52h",
        "outputId": "753cf386-e1c1-4476-c4a0-d8d37b9460a2"
      },
      "source": [
        "len(test_loader.dataset) / 26"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "500.0"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZxxQ0hwdLaKq",
        "outputId": "cfe51900-9daf-445a-e520-ad63cf646286"
      },
      "source": [
        "letter_size = len(test_loader.dataset) / 26\n",
        "best = test_data.classes[letters.index(max(letters))]\n",
        "worst = test_data.classes[letters.index(min(letters))]\n",
        "best_accurracy = max(letters) / letter_size\n",
        "worst_accurracy = min(letters) / letter_size\n",
        "print('The best recognized letter is', best, 'with accuracy =', best_accurracy)\n",
        "print('The worst recognized letter is', worst, 'with accuracy =', worst_accurracy)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The best recognized letter is o with accuracy = 0.9\n",
            "The worst recognized letter is q with accuracy = 0.416\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I5MaIXY-u_0s"
      },
      "source": [
        "####Часть 3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dikjk7FYOxA5",
        "outputId": "7a3d948f-b1cb-4247-8a8e-d3cb11de6a7d"
      },
      "source": [
        "confusions = []\n",
        "for i in range(26):\n",
        "  for j in range(26):\n",
        "    if i != j:\n",
        "      confusions.append((cm[i][j], test_data.classes[i], test_data.classes[j]))\n",
        "\n",
        "confusions = sorted(confusions, reverse=True)[0:11]\n",
        "for id, (num, true, false) in enumerate(confusions):\n",
        "  print(f'\"{true}\" was recognized as \"{false}\" {num} times')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\"i\" was recognized as \"l\" 166 times\n",
            "\"q\" was recognized as \"g\" 136 times\n",
            "\"l\" was recognized as \"i\" 91 times\n",
            "\"t\" was recognized as \"r\" 59 times\n",
            "\"y\" was recognized as \"v\" 46 times\n",
            "\"p\" was recognized as \"f\" 43 times\n",
            "\"t\" was recognized as \"f\" 42 times\n",
            "\"q\" was recognized as \"a\" 39 times\n",
            "\"k\" was recognized as \"r\" 39 times\n",
            "\"e\" was recognized as \"c\" 38 times\n",
            "\"m\" was recognized as \"n\" 35 times\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IPFYmQ1FS4cJ"
      },
      "source": [
        "Эти пары букв чаще всего путались между собой, так как имеют схожую форму.\n",
        "\n",
        "Например:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "1NO-o9BlTQJb",
        "outputId": "075473f9-4ecd-475a-a0b1-eac43f7b33d2"
      },
      "source": [
        "i = plt.imread('train/i/i_00024.jpg')\n",
        "i = np.transpose(i, axes=(1, 0, 2))\n",
        "plt.figure(figsize=(2,2))\n",
        "plt.imshow(i)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 144x144 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "DLpxmZtvT972",
        "outputId": "8b1a5f6f-93eb-46c5-a164-9b7ec8dbf9e0"
      },
      "source": [
        "l = plt.imread('train/l/l_00083.jpg')\n",
        "l = np.transpose(l, axes=(1, 0, 2))\n",
        "plt.figure(figsize=(2,2))\n",
        "plt.imshow(l)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 144x144 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zRtjGFQLUbuR"
      },
      "source": [
        "Буквы i и l выглядят практически идентично."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "S8DKENLWUkLO",
        "outputId": "bddc7ba6-f640-47ed-cb8f-c83f98463bf8"
      },
      "source": [
        "q = plt.imread('train/q/q_00532.jpg')\n",
        "q = np.transpose(q, axes=(1, 0, 2))\n",
        "plt.figure(figsize=(2,2))\n",
        "plt.imshow(q)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 144x144 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "ByAp2uVNVhF-",
        "outputId": "3dd6ebfa-d7f4-4c8e-d457-ea341cbee835"
      },
      "source": [
        "g = plt.imread('train/g/g_00218.jpg')\n",
        "g = np.transpose(g, axes=(1, 0, 2))\n",
        "plt.figure(figsize=(2,2))\n",
        "plt.imshow(g)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 144x144 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ai0uyRqKV5S4"
      },
      "source": [
        "Аналогично и с другими парами букв."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X1wU9elavPnL"
      },
      "source": [
        "####Часть 4"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "INpmVhzHvUIW"
      },
      "source": [
        "Первая буква моей фамилии - это \"к\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UNwZIpibWbZA",
        "outputId": "c6003974-84fe-4953-a224-62c9ca84ac15"
      },
      "source": [
        "id_k = test_data.classes.index('k')\n",
        "accuracy_k = cm[id_k][id_k] / letter_size\n",
        "print('Accuracy of \"k\" is', accuracy_k)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of \"k\" is 0.688\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mHx7PZoFXlt9",
        "outputId": "9bb25ee9-9611-49cc-99f2-db39de1732d4"
      },
      "source": [
        "confusions_k = []\n",
        "for j in range(26):\n",
        "    if j != id_k:\n",
        "      confusions_k.append((cm[id_k][j], test_data.classes[id_k], test_data.classes[j]))\n",
        "\n",
        "confusions_k = sorted(confusions_k, reverse=True)[0:5]\n",
        "for id, (num, true, false) in enumerate(confusions_k):\n",
        "  print(f'\"{true}\" was recognized as \"{false}\" {num} times')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\"k\" was recognized as \"r\" 39 times\n",
            "\"k\" was recognized as \"h\" 28 times\n",
            "\"k\" was recognized as \"x\" 16 times\n",
            "\"k\" was recognized as \"l\" 10 times\n",
            "\"k\" was recognized as \"b\" 8 times\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XgaImd4DL_b4"
      },
      "source": [
        "### Задание 2  \n",
        "  \n",
        "*Вес в общей оценке - 0.35*  \n",
        "  \n",
        "1. Постройте и обучите модели нейронной сети с 1-м, 2-мя и 3-мя сверточными слоями.  \n",
        "Попробуйте различные значения параметров сверток и числа фильтров на каждом слое. Оцените качество моделей с различными параметрами, проведите сравнительный анализ.  \n",
        "2. Для наилучшей конфигурации из предыдущего пункта, сравните, как меняется качество модели при увеличении размера батча при использовании BatchNorm и GroupNorm.    "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CkmdWMVbwQYu"
      },
      "source": [
        "####Часть 1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iHwUUhlZyKpD"
      },
      "source": [
        "transform = transforms.Compose(\n",
        "    [transforms.ToTensor(),\n",
        "     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n",
        "\n",
        "train_data = torchvision.datasets.ImageFolder(root='train', transform=transform)\n",
        "test_data = torchvision.datasets.ImageFolder(root = 'test', transform=transform)\n",
        "\n",
        "image_train_range = list(range(len(train_data.imgs)))\n",
        "train, valid = train_test_split(image_train_range, test_size=.2)\n",
        "\n",
        "train_loader = torch.utils.data.DataLoader(train_data, batch_size=4, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(train))\n",
        "valid_loader = torch.utils.data.DataLoader(train_data, batch_size=4, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(valid))\n",
        "test_loader = torch.utils.data.DataLoader(test_data, batch_size=4,\n",
        "                                          shuffle=True, num_workers=2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tfSS2CBWwWR6"
      },
      "source": [
        "Нейронная сеть с 1 сверточным слоем:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uGcg1WzUK4IU"
      },
      "source": [
        "class Net_1conv(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_1conv, self).__init__()#28*28\n",
        "        self.conv1 = nn.Conv2d(3, 8, 3)\n",
        "        self.fc1 = nn.Linear(8 * 26 * 26, 128)\n",
        "        self.fc2 = nn.Linear(128, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = x.view(-1, 8 * 26 * 26)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_1conv = Net_1conv()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zsjSkvkzhGm1"
      },
      "source": [
        "optimizer = optim.SGD(net_1conv.parameters(), lr=0.0001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B3jaCSPEL4wx",
        "outputId": "7ba9283a-5084-4086-ab9c-00e6c0830ecc"
      },
      "source": [
        "for epoch in range(5):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_1conv(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[1,   500] loss: 2.900\n",
            "[1,  1000] loss: 1.920\n",
            "[1,  1500] loss: 1.541\n",
            "[1,  2000] loss: 1.390\n",
            "[1,  2500] loss: 1.235\n",
            "[1,  3000] loss: 1.275\n",
            "[1,  3500] loss: 1.233\n",
            "[1,  4000] loss: 1.160\n",
            "[1,  4500] loss: 1.094\n",
            "[1,  5000] loss: 1.131\n",
            "[1,  5500] loss: 1.063\n",
            "[1,  6000] loss: 0.993\n",
            "[1,  6500] loss: 0.973\n",
            "[1,  7000] loss: 0.956\n",
            "[1,  7500] loss: 0.860\n",
            "[1,  8000] loss: 0.910\n",
            "[1,  8500] loss: 0.867\n",
            "[1,  9000] loss: 0.846\n",
            "[1,  9500] loss: 0.792\n",
            "[1, 10000] loss: 0.816\n",
            "[1, 10500] loss: 0.796\n",
            "[1, 11000] loss: 0.838\n",
            "[1, 11500] loss: 0.745\n",
            "[1, 12000] loss: 0.793\n",
            "[1, 12500] loss: 0.769\n",
            "[1, 13000] loss: 0.693\n",
            "[2,   500] loss: 0.650\n",
            "[2,  1000] loss: 0.723\n",
            "[2,  1500] loss: 0.678\n",
            "[2,  2000] loss: 0.659\n",
            "[2,  2500] loss: 0.670\n",
            "[2,  3000] loss: 0.689\n",
            "[2,  3500] loss: 0.645\n",
            "[2,  4000] loss: 0.607\n",
            "[2,  4500] loss: 0.667\n",
            "[2,  5000] loss: 0.614\n",
            "[2,  5500] loss: 0.626\n",
            "[2,  6000] loss: 0.642\n",
            "[2,  6500] loss: 0.626\n",
            "[2,  7000] loss: 0.634\n",
            "[2,  7500] loss: 0.610\n",
            "[2,  8000] loss: 0.634\n",
            "[2,  8500] loss: 0.628\n",
            "[2,  9000] loss: 0.578\n",
            "[2,  9500] loss: 0.589\n",
            "[2, 10000] loss: 0.602\n",
            "[2, 10500] loss: 0.593\n",
            "[2, 11000] loss: 0.594\n",
            "[2, 11500] loss: 0.582\n",
            "[2, 12000] loss: 0.584\n",
            "[2, 12500] loss: 0.563\n",
            "[2, 13000] loss: 0.610\n",
            "[3,   500] loss: 0.512\n",
            "[3,  1000] loss: 0.507\n",
            "[3,  1500] loss: 0.527\n",
            "[3,  2000] loss: 0.519\n",
            "[3,  2500] loss: 0.535\n",
            "[3,  3000] loss: 0.512\n",
            "[3,  3500] loss: 0.542\n",
            "[3,  4000] loss: 0.545\n",
            "[3,  4500] loss: 0.507\n",
            "[3,  5000] loss: 0.549\n",
            "[3,  5500] loss: 0.513\n",
            "[3,  6000] loss: 0.480\n",
            "[3,  6500] loss: 0.552\n",
            "[3,  7000] loss: 0.510\n",
            "[3,  7500] loss: 0.535\n",
            "[3,  8000] loss: 0.491\n",
            "[3,  8500] loss: 0.507\n",
            "[3,  9000] loss: 0.496\n",
            "[3,  9500] loss: 0.541\n",
            "[3, 10000] loss: 0.457\n",
            "[3, 10500] loss: 0.505\n",
            "[3, 11000] loss: 0.490\n",
            "[3, 11500] loss: 0.468\n",
            "[3, 12000] loss: 0.498\n",
            "[3, 12500] loss: 0.491\n",
            "[3, 13000] loss: 0.450\n",
            "[4,   500] loss: 0.439\n",
            "[4,  1000] loss: 0.473\n",
            "[4,  1500] loss: 0.421\n",
            "[4,  2000] loss: 0.498\n",
            "[4,  2500] loss: 0.474\n",
            "[4,  3000] loss: 0.468\n",
            "[4,  3500] loss: 0.464\n",
            "[4,  4000] loss: 0.403\n",
            "[4,  4500] loss: 0.456\n",
            "[4,  5000] loss: 0.425\n",
            "[4,  5500] loss: 0.457\n",
            "[4,  6000] loss: 0.452\n",
            "[4,  6500] loss: 0.472\n",
            "[4,  7000] loss: 0.443\n",
            "[4,  7500] loss: 0.462\n",
            "[4,  8000] loss: 0.445\n",
            "[4,  8500] loss: 0.484\n",
            "[4,  9000] loss: 0.410\n",
            "[4,  9500] loss: 0.410\n",
            "[4, 10000] loss: 0.445\n",
            "[4, 10500] loss: 0.477\n",
            "[4, 11000] loss: 0.447\n",
            "[4, 11500] loss: 0.445\n",
            "[4, 12000] loss: 0.403\n",
            "[4, 12500] loss: 0.387\n",
            "[4, 13000] loss: 0.413\n",
            "[5,   500] loss: 0.387\n",
            "[5,  1000] loss: 0.375\n",
            "[5,  1500] loss: 0.385\n",
            "[5,  2000] loss: 0.427\n",
            "[5,  2500] loss: 0.419\n",
            "[5,  3000] loss: 0.399\n",
            "[5,  3500] loss: 0.412\n",
            "[5,  4000] loss: 0.392\n",
            "[5,  4500] loss: 0.392\n",
            "[5,  5000] loss: 0.374\n",
            "[5,  5500] loss: 0.405\n",
            "[5,  6000] loss: 0.425\n",
            "[5,  6500] loss: 0.409\n",
            "[5,  7000] loss: 0.416\n",
            "[5,  7500] loss: 0.432\n",
            "[5,  8000] loss: 0.392\n",
            "[5,  8500] loss: 0.434\n",
            "[5,  9000] loss: 0.400\n",
            "[5,  9500] loss: 0.445\n",
            "[5, 10000] loss: 0.391\n",
            "[5, 10500] loss: 0.376\n",
            "[5, 11000] loss: 0.387\n",
            "[5, 11500] loss: 0.398\n",
            "[5, 12000] loss: 0.396\n",
            "[5, 12500] loss: 0.396\n",
            "[5, 13000] loss: 0.434\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Rf169oMx-1x",
        "outputId": "01b6094d-a4e9-4797-d503-53d2b7492314"
      },
      "source": [
        "valid_accuracy(net_1conv)\n",
        "test_accuracy(net_1conv)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the valid images: 85 %\n",
            "Accuracy of the network on the test images: 85 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R2eMDQCn0nV8"
      },
      "source": [
        "Нейронная сеть с 2 сверточными слоями:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CYoFZftCwc8r"
      },
      "source": [
        "class Net_2conv(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_2conv, self).__init__()#28*28\n",
        "        self.conv1 = nn.Conv2d(3, 8, 3) #26*26\n",
        "        self.conv2 = nn.Conv2d(8, 16, 3) #24*24\n",
        "        self.fc1 = nn.Linear(16 * 24 * 24, 128)\n",
        "        self.fc2 = nn.Linear(128, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = x.view(-1, 16 * 24 * 24)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_2conv = Net_2conv()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hpOZKZOTxSzK"
      },
      "source": [
        "optimizer = optim.SGD(net_2conv.parameters(), lr=0.0001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iKzNyoe1xX6o",
        "outputId": "f810fd83-b84f-49ee-aec3-b4cd9d0c5953"
      },
      "source": [
        "for epoch in range(5):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_2conv(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[1,   500] loss: 3.075\n",
            "[1,  1000] loss: 1.881\n",
            "[1,  1500] loss: 1.524\n",
            "[1,  2000] loss: 1.289\n",
            "[1,  2500] loss: 1.205\n",
            "[1,  3000] loss: 1.154\n",
            "[1,  3500] loss: 1.142\n",
            "[1,  4000] loss: 1.039\n",
            "[1,  4500] loss: 1.002\n",
            "[1,  5000] loss: 1.002\n",
            "[1,  5500] loss: 0.919\n",
            "[1,  6000] loss: 0.877\n",
            "[1,  6500] loss: 0.860\n",
            "[1,  7000] loss: 0.829\n",
            "[1,  7500] loss: 0.870\n",
            "[1,  8000] loss: 0.786\n",
            "[1,  8500] loss: 0.748\n",
            "[1,  9000] loss: 0.717\n",
            "[1,  9500] loss: 0.713\n",
            "[1, 10000] loss: 0.796\n",
            "[1, 10500] loss: 0.685\n",
            "[1, 11000] loss: 0.679\n",
            "[1, 11500] loss: 0.707\n",
            "[1, 12000] loss: 0.695\n",
            "[1, 12500] loss: 0.722\n",
            "[1, 13000] loss: 0.628\n",
            "[2,   500] loss: 0.575\n",
            "[2,  1000] loss: 0.620\n",
            "[2,  1500] loss: 0.588\n",
            "[2,  2000] loss: 0.593\n",
            "[2,  2500] loss: 0.583\n",
            "[2,  3000] loss: 0.557\n",
            "[2,  3500] loss: 0.600\n",
            "[2,  4000] loss: 0.564\n",
            "[2,  4500] loss: 0.585\n",
            "[2,  5000] loss: 0.600\n",
            "[2,  5500] loss: 0.524\n",
            "[2,  6000] loss: 0.557\n",
            "[2,  6500] loss: 0.496\n",
            "[2,  7000] loss: 0.562\n",
            "[2,  7500] loss: 0.527\n",
            "[2,  8000] loss: 0.516\n",
            "[2,  8500] loss: 0.510\n",
            "[2,  9000] loss: 0.531\n",
            "[2,  9500] loss: 0.506\n",
            "[2, 10000] loss: 0.515\n",
            "[2, 10500] loss: 0.496\n",
            "[2, 11000] loss: 0.542\n",
            "[2, 11500] loss: 0.511\n",
            "[2, 12000] loss: 0.532\n",
            "[2, 12500] loss: 0.486\n",
            "[2, 13000] loss: 0.474\n",
            "[3,   500] loss: 0.395\n",
            "[3,  1000] loss: 0.455\n",
            "[3,  1500] loss: 0.454\n",
            "[3,  2000] loss: 0.459\n",
            "[3,  2500] loss: 0.450\n",
            "[3,  3000] loss: 0.457\n",
            "[3,  3500] loss: 0.424\n",
            "[3,  4000] loss: 0.444\n",
            "[3,  4500] loss: 0.424\n",
            "[3,  5000] loss: 0.441\n",
            "[3,  5500] loss: 0.443\n",
            "[3,  6000] loss: 0.485\n",
            "[3,  6500] loss: 0.456\n",
            "[3,  7000] loss: 0.437\n",
            "[3,  7500] loss: 0.424\n",
            "[3,  8000] loss: 0.408\n",
            "[3,  8500] loss: 0.440\n",
            "[3,  9000] loss: 0.456\n",
            "[3,  9500] loss: 0.481\n",
            "[3, 10000] loss: 0.452\n",
            "[3, 10500] loss: 0.406\n",
            "[3, 11000] loss: 0.455\n",
            "[3, 11500] loss: 0.442\n",
            "[3, 12000] loss: 0.429\n",
            "[3, 12500] loss: 0.401\n",
            "[3, 13000] loss: 0.413\n",
            "[4,   500] loss: 0.349\n",
            "[4,  1000] loss: 0.411\n",
            "[4,  1500] loss: 0.397\n",
            "[4,  2000] loss: 0.356\n",
            "[4,  2500] loss: 0.451\n",
            "[4,  3000] loss: 0.411\n",
            "[4,  3500] loss: 0.375\n",
            "[4,  4000] loss: 0.356\n",
            "[4,  4500] loss: 0.378\n",
            "[4,  5000] loss: 0.441\n",
            "[4,  5500] loss: 0.397\n",
            "[4,  6000] loss: 0.376\n",
            "[4,  6500] loss: 0.404\n",
            "[4,  7000] loss: 0.382\n",
            "[4,  7500] loss: 0.359\n",
            "[4,  8000] loss: 0.415\n",
            "[4,  8500] loss: 0.370\n",
            "[4,  9000] loss: 0.393\n",
            "[4,  9500] loss: 0.395\n",
            "[4, 10000] loss: 0.343\n",
            "[4, 10500] loss: 0.371\n",
            "[4, 11000] loss: 0.381\n",
            "[4, 11500] loss: 0.374\n",
            "[4, 12000] loss: 0.365\n",
            "[4, 12500] loss: 0.423\n",
            "[4, 13000] loss: 0.347\n",
            "[5,   500] loss: 0.352\n",
            "[5,  1000] loss: 0.315\n",
            "[5,  1500] loss: 0.309\n",
            "[5,  2000] loss: 0.331\n",
            "[5,  2500] loss: 0.352\n",
            "[5,  3000] loss: 0.375\n",
            "[5,  3500] loss: 0.384\n",
            "[5,  4000] loss: 0.328\n",
            "[5,  4500] loss: 0.361\n",
            "[5,  5000] loss: 0.352\n",
            "[5,  5500] loss: 0.383\n",
            "[5,  6000] loss: 0.395\n",
            "[5,  6500] loss: 0.355\n",
            "[5,  7000] loss: 0.347\n",
            "[5,  7500] loss: 0.383\n",
            "[5,  8000] loss: 0.325\n",
            "[5,  8500] loss: 0.334\n",
            "[5,  9000] loss: 0.333\n",
            "[5,  9500] loss: 0.354\n",
            "[5, 10000] loss: 0.346\n",
            "[5, 10500] loss: 0.379\n",
            "[5, 11000] loss: 0.349\n",
            "[5, 11500] loss: 0.348\n",
            "[5, 12000] loss: 0.339\n",
            "[5, 12500] loss: 0.334\n",
            "[5, 13000] loss: 0.340\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NEwxk60N3wiM",
        "outputId": "7f107e14-b91d-40a5-eeda-2760a5b7bfc6"
      },
      "source": [
        "valid_accuracy(net_2conv)\n",
        "test_accuracy(net_2conv)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the valid images: 86 %\n",
            "Accuracy of the network on the test images: 86 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5_llW1RT4Bt9"
      },
      "source": [
        "\n",
        "Нейронная сеть с 3 сверточными слоями:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4wzMAkMV08iA"
      },
      "source": [
        "class Net_3conv(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_3conv, self).__init__()#28*28\n",
        "        self.conv1 = nn.Conv2d(3, 6, 3) #26*26\n",
        "        self.conv2 = nn.Conv2d(6, 16, 3) #24*24\n",
        "        self.conv3 = nn.Conv2d(16, 32, 2) #23*23\n",
        "        self.fc1 = nn.Linear(32 * 23 * 23, 128)\n",
        "        self.fc2 = nn.Linear(128, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = self.conv3(x)\n",
        "        x = x.view(-1, 32 * 23 * 23)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_3conv = Net_3conv()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VdXFgkP91nr2"
      },
      "source": [
        "optimizer = optim.SGD(net_3conv.parameters(), lr=0.0001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZdwV2zsG1nUK",
        "outputId": "7bdd17f5-e313-4a40-fb13-2c9732375be7"
      },
      "source": [
        "for epoch in range(5):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_3conv(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[1,   500] loss: 3.100\n",
            "[1,  1000] loss: 1.884\n",
            "[1,  1500] loss: 1.437\n",
            "[1,  2000] loss: 1.268\n",
            "[1,  2500] loss: 1.241\n",
            "[1,  3000] loss: 1.169\n",
            "[1,  3500] loss: 1.087\n",
            "[1,  4000] loss: 1.028\n",
            "[1,  4500] loss: 0.935\n",
            "[1,  5000] loss: 0.932\n",
            "[1,  5500] loss: 0.940\n",
            "[1,  6000] loss: 0.915\n",
            "[1,  6500] loss: 0.819\n",
            "[1,  7000] loss: 0.786\n",
            "[1,  7500] loss: 0.766\n",
            "[1,  8000] loss: 0.813\n",
            "[1,  8500] loss: 0.730\n",
            "[1,  9000] loss: 0.712\n",
            "[1,  9500] loss: 0.718\n",
            "[1, 10000] loss: 0.651\n",
            "[1, 10500] loss: 0.666\n",
            "[1, 11000] loss: 0.680\n",
            "[1, 11500] loss: 0.695\n",
            "[1, 12000] loss: 0.661\n",
            "[1, 12500] loss: 0.707\n",
            "[1, 13000] loss: 0.655\n",
            "[2,   500] loss: 0.586\n",
            "[2,  1000] loss: 0.626\n",
            "[2,  1500] loss: 0.595\n",
            "[2,  2000] loss: 0.574\n",
            "[2,  2500] loss: 0.560\n",
            "[2,  3000] loss: 0.551\n",
            "[2,  3500] loss: 0.600\n",
            "[2,  4000] loss: 0.528\n",
            "[2,  4500] loss: 0.617\n",
            "[2,  5000] loss: 0.577\n",
            "[2,  5500] loss: 0.520\n",
            "[2,  6000] loss: 0.519\n",
            "[2,  6500] loss: 0.529\n",
            "[2,  7000] loss: 0.540\n",
            "[2,  7500] loss: 0.550\n",
            "[2,  8000] loss: 0.516\n",
            "[2,  8500] loss: 0.539\n",
            "[2,  9000] loss: 0.524\n",
            "[2,  9500] loss: 0.523\n",
            "[2, 10000] loss: 0.489\n",
            "[2, 10500] loss: 0.588\n",
            "[2, 11000] loss: 0.496\n",
            "[2, 11500] loss: 0.473\n",
            "[2, 12000] loss: 0.481\n",
            "[2, 12500] loss: 0.479\n",
            "[2, 13000] loss: 0.469\n",
            "[3,   500] loss: 0.431\n",
            "[3,  1000] loss: 0.427\n",
            "[3,  1500] loss: 0.448\n",
            "[3,  2000] loss: 0.454\n",
            "[3,  2500] loss: 0.501\n",
            "[3,  3000] loss: 0.447\n",
            "[3,  3500] loss: 0.443\n",
            "[3,  4000] loss: 0.459\n",
            "[3,  4500] loss: 0.448\n",
            "[3,  5000] loss: 0.470\n",
            "[3,  5500] loss: 0.433\n",
            "[3,  6000] loss: 0.429\n",
            "[3,  6500] loss: 0.462\n",
            "[3,  7000] loss: 0.475\n",
            "[3,  7500] loss: 0.438\n",
            "[3,  8000] loss: 0.452\n",
            "[3,  8500] loss: 0.414\n",
            "[3,  9000] loss: 0.449\n",
            "[3,  9500] loss: 0.450\n",
            "[3, 10000] loss: 0.450\n",
            "[3, 10500] loss: 0.427\n",
            "[3, 11000] loss: 0.459\n",
            "[3, 11500] loss: 0.404\n",
            "[3, 12000] loss: 0.436\n",
            "[3, 12500] loss: 0.426\n",
            "[3, 13000] loss: 0.404\n",
            "[4,   500] loss: 0.352\n",
            "[4,  1000] loss: 0.379\n",
            "[4,  1500] loss: 0.379\n",
            "[4,  2000] loss: 0.368\n",
            "[4,  2500] loss: 0.375\n",
            "[4,  3000] loss: 0.448\n",
            "[4,  3500] loss: 0.397\n",
            "[4,  4000] loss: 0.337\n",
            "[4,  4500] loss: 0.378\n",
            "[4,  5000] loss: 0.367\n",
            "[4,  5500] loss: 0.394\n",
            "[4,  6000] loss: 0.401\n",
            "[4,  6500] loss: 0.392\n",
            "[4,  7000] loss: 0.371\n",
            "[4,  7500] loss: 0.380\n",
            "[4,  8000] loss: 0.370\n",
            "[4,  8500] loss: 0.406\n",
            "[4,  9000] loss: 0.371\n",
            "[4,  9500] loss: 0.405\n",
            "[4, 10000] loss: 0.376\n",
            "[4, 10500] loss: 0.429\n",
            "[4, 11000] loss: 0.407\n",
            "[4, 11500] loss: 0.391\n",
            "[4, 12000] loss: 0.401\n",
            "[4, 12500] loss: 0.417\n",
            "[4, 13000] loss: 0.404\n",
            "[5,   500] loss: 0.326\n",
            "[5,  1000] loss: 0.353\n",
            "[5,  1500] loss: 0.274\n",
            "[5,  2000] loss: 0.369\n",
            "[5,  2500] loss: 0.342\n",
            "[5,  3000] loss: 0.342\n",
            "[5,  3500] loss: 0.339\n",
            "[5,  4000] loss: 0.349\n",
            "[5,  4500] loss: 0.346\n",
            "[5,  5000] loss: 0.355\n",
            "[5,  5500] loss: 0.365\n",
            "[5,  6000] loss: 0.395\n",
            "[5,  6500] loss: 0.362\n",
            "[5,  7000] loss: 0.394\n",
            "[5,  7500] loss: 0.318\n",
            "[5,  8000] loss: 0.376\n",
            "[5,  8500] loss: 0.384\n",
            "[5,  9000] loss: 0.345\n",
            "[5,  9500] loss: 0.342\n",
            "[5, 10000] loss: 0.330\n",
            "[5, 10500] loss: 0.362\n",
            "[5, 11000] loss: 0.366\n",
            "[5, 11500] loss: 0.329\n",
            "[5, 12000] loss: 0.342\n",
            "[5, 12500] loss: 0.356\n",
            "[5, 13000] loss: 0.346\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "65jKi0RbA6-b",
        "outputId": "01a5c956-aafa-45ad-e321-19343d9be2d4"
      },
      "source": [
        "valid_accuracy(net_3conv)\n",
        "test_accuracy(net_3conv)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy of the network on the valid images: 86 %\n",
            "Accuracy of the network on the test images: 86 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sM2i7H7nDTM-"
      },
      "source": [
        "Теперь попробуем различные параметры."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9DQlG0VmAADj"
      },
      "source": [
        "class Net_3conv_2(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_3conv_2, self).__init__()#28*28\n",
        "        self.conv1 = nn.Conv2d(3, 9, 5) #24*24\n",
        "        self.conv2 = nn.Conv2d(9, 18, 3) #22*22\n",
        "        self.conv3 = nn.Conv2d(18, 36, 2, 2) #11*11\n",
        "        self.fc1 = nn.Linear(36 * 11 * 11, 128)\n",
        "        self.fc2 = nn.Linear(128, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = self.conv3(x)\n",
        "        x = x.view(-1, 36 * 11 * 11)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_3conv_2 = Net_3conv_2()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KEnqod0qByMV"
      },
      "source": [
        "#optimizer = optim.SGD(net_3conv_2.parameters(), lr=0.0001, momentum=0.9)\n",
        "optimizer = optim.Adam(net_3conv_2.parameters(), lr=0.001)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yVO0e8zNB0pG",
        "outputId": "62722cd2-539a-4eec-a81b-1a9d9132c393"
      },
      "source": [
        "for epoch in range(5):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_3conv_2(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1,   500] loss: 1.775\n",
            "[1,  1000] loss: 1.218\n",
            "[1,  1500] loss: 1.094\n",
            "[1,  2000] loss: 0.979\n",
            "[1,  2500] loss: 0.914\n",
            "[1,  3000] loss: 0.885\n",
            "[1,  3500] loss: 0.742\n",
            "[1,  4000] loss: 0.787\n",
            "[1,  4500] loss: 0.745\n",
            "[1,  5000] loss: 0.764\n",
            "[1,  5500] loss: 0.697\n",
            "[1,  6000] loss: 0.684\n",
            "[1,  6500] loss: 0.698\n",
            "[1,  7000] loss: 0.701\n",
            "[1,  7500] loss: 0.700\n",
            "[1,  8000] loss: 0.663\n",
            "[1,  8500] loss: 0.647\n",
            "[1,  9000] loss: 0.606\n",
            "[1,  9500] loss: 0.626\n",
            "[1, 10000] loss: 0.602\n",
            "[1, 10500] loss: 0.607\n",
            "[1, 11000] loss: 0.615\n",
            "[1, 11500] loss: 0.590\n",
            "[1, 12000] loss: 0.614\n",
            "[1, 12500] loss: 0.643\n",
            "[1, 13000] loss: 0.567\n",
            "[2,   500] loss: 0.515\n",
            "[2,  1000] loss: 0.487\n",
            "[2,  1500] loss: 0.519\n",
            "[2,  2000] loss: 0.553\n",
            "[2,  2500] loss: 0.529\n",
            "[2,  3000] loss: 0.538\n",
            "[2,  3500] loss: 0.546\n",
            "[2,  4000] loss: 0.585\n",
            "[2,  4500] loss: 0.521\n",
            "[2,  5000] loss: 0.530\n",
            "[2,  5500] loss: 0.501\n",
            "[2,  6000] loss: 0.511\n",
            "[2,  6500] loss: 0.547\n",
            "[2,  7000] loss: 0.479\n",
            "[2,  7500] loss: 0.521\n",
            "[2,  8000] loss: 0.483\n",
            "[2,  8500] loss: 0.531\n",
            "[2,  9000] loss: 0.508\n",
            "[2,  9500] loss: 0.506\n",
            "[2, 10000] loss: 0.535\n",
            "[2, 10500] loss: 0.503\n",
            "[2, 11000] loss: 0.486\n",
            "[2, 11500] loss: 0.517\n",
            "[2, 12000] loss: 0.488\n",
            "[2, 12500] loss: 0.490\n",
            "[2, 13000] loss: 0.527\n",
            "[3,   500] loss: 0.411\n",
            "[3,  1000] loss: 0.419\n",
            "[3,  1500] loss: 0.473\n",
            "[3,  2000] loss: 0.401\n",
            "[3,  2500] loss: 0.419\n",
            "[3,  3000] loss: 0.420\n",
            "[3,  3500] loss: 0.457\n",
            "[3,  4000] loss: 0.446\n",
            "[3,  4500] loss: 0.473\n",
            "[3,  5000] loss: 0.453\n",
            "[3,  5500] loss: 0.455\n",
            "[3,  6000] loss: 0.458\n",
            "[3,  6500] loss: 0.408\n",
            "[3,  7000] loss: 0.427\n",
            "[3,  7500] loss: 0.456\n",
            "[3,  8000] loss: 0.453\n",
            "[3,  8500] loss: 0.395\n",
            "[3,  9000] loss: 0.447\n",
            "[3,  9500] loss: 0.427\n",
            "[3, 10000] loss: 0.468\n",
            "[3, 10500] loss: 0.433\n",
            "[3, 11000] loss: 0.415\n",
            "[3, 11500] loss: 0.486\n",
            "[3, 12000] loss: 0.445\n",
            "[3, 12500] loss: 0.436\n",
            "[3, 13000] loss: 0.466\n",
            "[4,   500] loss: 0.341\n",
            "[4,  1000] loss: 0.352\n",
            "[4,  1500] loss: 0.343\n",
            "[4,  2000] loss: 0.417\n",
            "[4,  2500] loss: 0.382\n",
            "[4,  3000] loss: 0.445\n",
            "[4,  3500] loss: 0.347\n",
            "[4,  4000] loss: 0.379\n",
            "[4,  4500] loss: 0.358\n",
            "[4,  5000] loss: 0.394\n",
            "[4,  5500] loss: 0.388\n",
            "[4,  6000] loss: 0.374\n",
            "[4,  6500] loss: 0.361\n",
            "[4,  7000] loss: 0.403\n",
            "[4,  7500] loss: 0.379\n",
            "[4,  8000] loss: 0.412\n",
            "[4,  8500] loss: 0.423\n",
            "[4,  9000] loss: 0.421\n",
            "[4,  9500] loss: 0.396\n",
            "[4, 10000] loss: 0.389\n",
            "[4, 10500] loss: 0.390\n",
            "[4, 11000] loss: 0.409\n",
            "[4, 11500] loss: 0.439\n",
            "[4, 12000] loss: 0.420\n",
            "[4, 12500] loss: 0.439\n",
            "[4, 13000] loss: 0.453\n",
            "[5,   500] loss: 0.284\n",
            "[5,  1000] loss: 0.275\n",
            "[5,  1500] loss: 0.357\n",
            "[5,  2000] loss: 0.318\n",
            "[5,  2500] loss: 0.343\n",
            "[5,  3000] loss: 0.293\n",
            "[5,  3500] loss: 0.337\n",
            "[5,  4000] loss: 0.308\n",
            "[5,  4500] loss: 0.346\n",
            "[5,  5000] loss: 0.395\n",
            "[5,  5500] loss: 0.434\n",
            "[5,  6000] loss: 0.375\n",
            "[5,  6500] loss: 0.333\n",
            "[5,  7000] loss: 0.384\n",
            "[5,  7500] loss: 0.334\n",
            "[5,  8000] loss: 0.372\n",
            "[5,  8500] loss: 0.389\n",
            "[5,  9000] loss: 0.379\n",
            "[5,  9500] loss: 0.388\n",
            "[5, 10000] loss: 0.367\n",
            "[5, 10500] loss: 0.353\n",
            "[5, 11000] loss: 0.395\n",
            "[5, 11500] loss: 0.413\n",
            "[5, 12000] loss: 0.379\n",
            "[5, 12500] loss: 0.400\n",
            "[5, 13000] loss: 0.392\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eJ76jVGM2CJB",
        "outputId": "4c136a7f-4a5d-4ab2-9884-905475326dfa"
      },
      "source": [
        "valid_accuracy(net_3conv_2)\n",
        "test_accuracy(net_3conv_2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the network on the valid images: 85 %\n",
            "Accuracy of the network on the test images: 85 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hNGxqPxqJZRk"
      },
      "source": [
        "class Net_3conv_3(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_3conv_3, self).__init__()#28*28\n",
        "        self.conv1 = nn.Conv2d(3, 32, 4, 2) #13*13\n",
        "        self.conv2 = nn.Conv2d(32, 64, 3) #11*11\n",
        "        self.conv3 = nn.Conv2d(64, 128, 3) #9*9\n",
        "        self.fc1 = nn.Linear(128 * 9 * 9, 128)\n",
        "        self.fc2 = nn.Linear(128, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = self.conv3(x)\n",
        "        x = x.view(-1, 128 * 9 * 9)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_3conv_3 = Net_3conv_3()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8imqhVUYLFlK"
      },
      "source": [
        "optimizer = optim.SGD(net_3conv_3.parameters(), lr=0.0001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NaKgiXG1LIN2",
        "outputId": "1032977c-387b-425f-b34c-e0cbbd3b8155"
      },
      "source": [
        "for epoch in range(5):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_3conv_3(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1,   500] loss: 3.159\n",
            "[1,  1000] loss: 2.309\n",
            "[1,  1500] loss: 1.602\n",
            "[1,  2000] loss: 1.399\n",
            "[1,  2500] loss: 1.317\n",
            "[1,  3000] loss: 1.204\n",
            "[1,  3500] loss: 1.167\n",
            "[1,  4000] loss: 1.039\n",
            "[1,  4500] loss: 1.001\n",
            "[1,  5000] loss: 0.981\n",
            "[1,  5500] loss: 0.909\n",
            "[1,  6000] loss: 0.887\n",
            "[1,  6500] loss: 0.856\n",
            "[1,  7000] loss: 0.859\n",
            "[1,  7500] loss: 0.845\n",
            "[1,  8000] loss: 0.812\n",
            "[1,  8500] loss: 0.772\n",
            "[1,  9000] loss: 0.769\n",
            "[1,  9500] loss: 0.749\n",
            "[1, 10000] loss: 0.685\n",
            "[1, 10500] loss: 0.703\n",
            "[1, 11000] loss: 0.703\n",
            "[1, 11500] loss: 0.713\n",
            "[1, 12000] loss: 0.726\n",
            "[1, 12500] loss: 0.702\n",
            "[1, 13000] loss: 0.653\n",
            "[2,   500] loss: 0.575\n",
            "[2,  1000] loss: 0.673\n",
            "[2,  1500] loss: 0.653\n",
            "[2,  2000] loss: 0.620\n",
            "[2,  2500] loss: 0.569\n",
            "[2,  3000] loss: 0.583\n",
            "[2,  3500] loss: 0.601\n",
            "[2,  4000] loss: 0.562\n",
            "[2,  4500] loss: 0.553\n",
            "[2,  5000] loss: 0.581\n",
            "[2,  5500] loss: 0.592\n",
            "[2,  6000] loss: 0.548\n",
            "[2,  6500] loss: 0.611\n",
            "[2,  7000] loss: 0.615\n",
            "[2,  7500] loss: 0.527\n",
            "[2,  8000] loss: 0.569\n",
            "[2,  8500] loss: 0.593\n",
            "[2,  9000] loss: 0.545\n",
            "[2,  9500] loss: 0.535\n",
            "[2, 10000] loss: 0.566\n",
            "[2, 10500] loss: 0.540\n",
            "[2, 11000] loss: 0.523\n",
            "[2, 11500] loss: 0.477\n",
            "[2, 12000] loss: 0.544\n",
            "[2, 12500] loss: 0.541\n",
            "[2, 13000] loss: 0.542\n",
            "[3,   500] loss: 0.488\n",
            "[3,  1000] loss: 0.475\n",
            "[3,  1500] loss: 0.463\n",
            "[3,  2000] loss: 0.464\n",
            "[3,  2500] loss: 0.498\n",
            "[3,  3000] loss: 0.525\n",
            "[3,  3500] loss: 0.488\n",
            "[3,  4000] loss: 0.487\n",
            "[3,  4500] loss: 0.511\n",
            "[3,  5000] loss: 0.473\n",
            "[3,  5500] loss: 0.513\n",
            "[3,  6000] loss: 0.463\n",
            "[3,  6500] loss: 0.481\n",
            "[3,  7000] loss: 0.491\n",
            "[3,  7500] loss: 0.502\n",
            "[3,  8000] loss: 0.480\n",
            "[3,  8500] loss: 0.476\n",
            "[3,  9000] loss: 0.430\n",
            "[3,  9500] loss: 0.438\n",
            "[3, 10000] loss: 0.483\n",
            "[3, 10500] loss: 0.511\n",
            "[3, 11000] loss: 0.456\n",
            "[3, 11500] loss: 0.478\n",
            "[3, 12000] loss: 0.443\n",
            "[3, 12500] loss: 0.467\n",
            "[3, 13000] loss: 0.440\n",
            "[4,   500] loss: 0.422\n",
            "[4,  1000] loss: 0.429\n",
            "[4,  1500] loss: 0.384\n",
            "[4,  2000] loss: 0.436\n",
            "[4,  2500] loss: 0.427\n",
            "[4,  3000] loss: 0.490\n",
            "[4,  3500] loss: 0.454\n",
            "[4,  4000] loss: 0.446\n",
            "[4,  4500] loss: 0.381\n",
            "[4,  5000] loss: 0.400\n",
            "[4,  5500] loss: 0.415\n",
            "[4,  6000] loss: 0.421\n",
            "[4,  6500] loss: 0.466\n",
            "[4,  7000] loss: 0.445\n",
            "[4,  7500] loss: 0.410\n",
            "[4,  8000] loss: 0.417\n",
            "[4,  8500] loss: 0.427\n",
            "[4,  9000] loss: 0.428\n",
            "[4,  9500] loss: 0.440\n",
            "[4, 10000] loss: 0.391\n",
            "[4, 10500] loss: 0.417\n",
            "[4, 11000] loss: 0.467\n",
            "[4, 11500] loss: 0.393\n",
            "[4, 12000] loss: 0.420\n",
            "[4, 12500] loss: 0.421\n",
            "[4, 13000] loss: 0.387\n",
            "[5,   500] loss: 0.379\n",
            "[5,  1000] loss: 0.349\n",
            "[5,  1500] loss: 0.349\n",
            "[5,  2000] loss: 0.381\n",
            "[5,  2500] loss: 0.375\n",
            "[5,  3000] loss: 0.402\n",
            "[5,  3500] loss: 0.377\n",
            "[5,  4000] loss: 0.374\n",
            "[5,  4500] loss: 0.385\n",
            "[5,  5000] loss: 0.386\n",
            "[5,  5500] loss: 0.365\n",
            "[5,  6000] loss: 0.409\n",
            "[5,  6500] loss: 0.425\n",
            "[5,  7000] loss: 0.406\n",
            "[5,  7500] loss: 0.410\n",
            "[5,  8000] loss: 0.386\n",
            "[5,  8500] loss: 0.411\n",
            "[5,  9000] loss: 0.374\n",
            "[5,  9500] loss: 0.390\n",
            "[5, 10000] loss: 0.382\n",
            "[5, 10500] loss: 0.333\n",
            "[5, 11000] loss: 0.401\n",
            "[5, 11500] loss: 0.421\n",
            "[5, 12000] loss: 0.409\n",
            "[5, 12500] loss: 0.360\n",
            "[5, 13000] loss: 0.384\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ekby8bvd5lUn",
        "outputId": "c69f9cc2-c067-4de3-b119-11298531097d"
      },
      "source": [
        "valid_accuracy(net_3conv_3)\n",
        "test_accuracy(net_3conv_3)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the network on the valid images: 86 %\n",
            "Accuracy of the network on the test images: 86 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WyHE8PH9QuAP"
      },
      "source": [
        "Лучшее всего справились модели *net_3conv* и *net_3conv_3* с точностью 86%"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "khuqJqVI-Vtj"
      },
      "source": [
        "####Часть 2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IqRBIgWwOi1y"
      },
      "source": [
        "Далее посмотрим как изменится точность сети *net_3conv*, если добавить BatchNorm и GroupNorm"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AE6JfaIWQ3Q_"
      },
      "source": [
        "class Net_bn(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_bn, self).__init__()#28*28\n",
        "        self.conv1 = nn.Conv2d(3, 6, 3) #26*26\n",
        "        self.batch1 = nn.BatchNorm2d(6)\n",
        "        self.conv2 = nn.Conv2d(6, 16, 3) #24*24\n",
        "        self.batch2 = nn.BatchNorm2d(16)\n",
        "        self.conv3 = nn.Conv2d(16, 32, 2) #23*23\n",
        "        self.fc1 = nn.Linear(32 * 23 * 23, 128)\n",
        "        self.fc2 = nn.Linear(128, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.batch1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = self.batch2(x)\n",
        "        x = self.conv3(x)\n",
        "        x = x.view(-1, 32 * 23 * 23)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_bn = Net_bn()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qE_rkQO-UhFN"
      },
      "source": [
        "optimizer = optim.SGD(net_bn.parameters(), lr=0.0001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9jqVLvnXUgsG",
        "outputId": "9bc68c5e-7f31-4be8-d9ec-197c02e84b58"
      },
      "source": [
        "for epoch in range(5):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_bn(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1,   500] loss: 2.410\n",
            "[1,  1000] loss: 1.389\n",
            "[1,  1500] loss: 1.159\n",
            "[1,  2000] loss: 1.131\n",
            "[1,  2500] loss: 1.007\n",
            "[1,  3000] loss: 0.949\n",
            "[1,  3500] loss: 0.970\n",
            "[1,  4000] loss: 0.895\n",
            "[1,  4500] loss: 0.847\n",
            "[1,  5000] loss: 0.831\n",
            "[1,  5500] loss: 0.777\n",
            "[1,  6000] loss: 0.785\n",
            "[1,  6500] loss: 0.768\n",
            "[1,  7000] loss: 0.721\n",
            "[1,  7500] loss: 0.700\n",
            "[1,  8000] loss: 0.678\n",
            "[1,  8500] loss: 0.707\n",
            "[1,  9000] loss: 0.673\n",
            "[1,  9500] loss: 0.659\n",
            "[1, 10000] loss: 0.656\n",
            "[1, 10500] loss: 0.641\n",
            "[1, 11000] loss: 0.563\n",
            "[1, 11500] loss: 0.614\n",
            "[1, 12000] loss: 0.617\n",
            "[1, 12500] loss: 0.589\n",
            "[1, 13000] loss: 0.560\n",
            "[2,   500] loss: 0.561\n",
            "[2,  1000] loss: 0.509\n",
            "[2,  1500] loss: 0.521\n",
            "[2,  2000] loss: 0.556\n",
            "[2,  2500] loss: 0.476\n",
            "[2,  3000] loss: 0.547\n",
            "[2,  3500] loss: 0.537\n",
            "[2,  4000] loss: 0.529\n",
            "[2,  4500] loss: 0.474\n",
            "[2,  5000] loss: 0.500\n",
            "[2,  5500] loss: 0.508\n",
            "[2,  6000] loss: 0.501\n",
            "[2,  6500] loss: 0.508\n",
            "[2,  7000] loss: 0.517\n",
            "[2,  7500] loss: 0.502\n",
            "[2,  8000] loss: 0.487\n",
            "[2,  8500] loss: 0.482\n",
            "[2,  9000] loss: 0.473\n",
            "[2,  9500] loss: 0.516\n",
            "[2, 10000] loss: 0.492\n",
            "[2, 10500] loss: 0.422\n",
            "[2, 11000] loss: 0.520\n",
            "[2, 11500] loss: 0.489\n",
            "[2, 12000] loss: 0.488\n",
            "[2, 12500] loss: 0.470\n",
            "[2, 13000] loss: 0.479\n",
            "[3,   500] loss: 0.389\n",
            "[3,  1000] loss: 0.430\n",
            "[3,  1500] loss: 0.420\n",
            "[3,  2000] loss: 0.397\n",
            "[3,  2500] loss: 0.385\n",
            "[3,  3000] loss: 0.397\n",
            "[3,  3500] loss: 0.411\n",
            "[3,  4000] loss: 0.445\n",
            "[3,  4500] loss: 0.389\n",
            "[3,  5000] loss: 0.445\n",
            "[3,  5500] loss: 0.439\n",
            "[3,  6000] loss: 0.389\n",
            "[3,  6500] loss: 0.445\n",
            "[3,  7000] loss: 0.425\n",
            "[3,  7500] loss: 0.403\n",
            "[3,  8000] loss: 0.452\n",
            "[3,  8500] loss: 0.422\n",
            "[3,  9000] loss: 0.382\n",
            "[3,  9500] loss: 0.432\n",
            "[3, 10000] loss: 0.422\n",
            "[3, 10500] loss: 0.448\n",
            "[3, 11000] loss: 0.382\n",
            "[3, 11500] loss: 0.416\n",
            "[3, 12000] loss: 0.456\n",
            "[3, 12500] loss: 0.429\n",
            "[3, 13000] loss: 0.445\n",
            "[4,   500] loss: 0.324\n",
            "[4,  1000] loss: 0.330\n",
            "[4,  1500] loss: 0.340\n",
            "[4,  2000] loss: 0.356\n",
            "[4,  2500] loss: 0.362\n",
            "[4,  3000] loss: 0.359\n",
            "[4,  3500] loss: 0.358\n",
            "[4,  4000] loss: 0.375\n",
            "[4,  4500] loss: 0.345\n",
            "[4,  5000] loss: 0.350\n",
            "[4,  5500] loss: 0.354\n",
            "[4,  6000] loss: 0.358\n",
            "[4,  6500] loss: 0.404\n",
            "[4,  7000] loss: 0.372\n",
            "[4,  7500] loss: 0.383\n",
            "[4,  8000] loss: 0.408\n",
            "[4,  8500] loss: 0.372\n",
            "[4,  9000] loss: 0.368\n",
            "[4,  9500] loss: 0.395\n",
            "[4, 10000] loss: 0.366\n",
            "[4, 10500] loss: 0.372\n",
            "[4, 11000] loss: 0.399\n",
            "[4, 11500] loss: 0.394\n",
            "[4, 12000] loss: 0.387\n",
            "[4, 12500] loss: 0.351\n",
            "[4, 13000] loss: 0.369\n",
            "[5,   500] loss: 0.284\n",
            "[5,  1000] loss: 0.296\n",
            "[5,  1500] loss: 0.331\n",
            "[5,  2000] loss: 0.322\n",
            "[5,  2500] loss: 0.318\n",
            "[5,  3000] loss: 0.317\n",
            "[5,  3500] loss: 0.306\n",
            "[5,  4000] loss: 0.335\n",
            "[5,  4500] loss: 0.376\n",
            "[5,  5000] loss: 0.317\n",
            "[5,  5500] loss: 0.347\n",
            "[5,  6000] loss: 0.328\n",
            "[5,  6500] loss: 0.375\n",
            "[5,  7000] loss: 0.318\n",
            "[5,  7500] loss: 0.331\n",
            "[5,  8000] loss: 0.318\n",
            "[5,  8500] loss: 0.306\n",
            "[5,  9000] loss: 0.330\n",
            "[5,  9500] loss: 0.312\n",
            "[5, 10000] loss: 0.344\n",
            "[5, 10500] loss: 0.363\n",
            "[5, 11000] loss: 0.382\n",
            "[5, 11500] loss: 0.354\n",
            "[5, 12000] loss: 0.340\n",
            "[5, 12500] loss: 0.329\n",
            "[5, 13000] loss: 0.306\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zpe4sM9BDeu6",
        "outputId": "9173b0cd-9c10-4ebe-b572-66cb368f0de8"
      },
      "source": [
        "valid_accuracy(net_bn)\n",
        "test_accuracy(net_bn)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the network on the valid images: 87 %\n",
            "Accuracy of the network on the test images: 87 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C7tlTY_Qb7ct"
      },
      "source": [
        "Добавив BatchNorm, точность модели увеличилась до 87%"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_Agutpjwd2-L"
      },
      "source": [
        "Теперь попробуем использовать GroupNorm"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q_-cLtLrcEAy"
      },
      "source": [
        "class Net_gn(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net_gn, self).__init__()#28*28\n",
        "        self.conv1 = nn.Conv2d(3, 6, 3) #26*26\n",
        "        self.group1 = nn.GroupNorm(3, 6)\n",
        "        self.conv2 = nn.Conv2d(6, 16, 3) #24*24\n",
        "        self.group2 = nn.GroupNorm(4, 16)\n",
        "        self.conv3 = nn.Conv2d(16, 32, 2) #23*23\n",
        "        self.fc1 = nn.Linear(32 * 23 * 23, 128)\n",
        "        self.fc2 = nn.Linear(128, 26)\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.group1(x)\n",
        "        x = self.conv2(x)\n",
        "        x = self.group2(x)\n",
        "        x = self.conv3(x)\n",
        "        x = x.view(-1, 32 * 23 * 23)\n",
        "        x = F.relu(self.fc1(x))\n",
        "        x = self.fc2(x)\n",
        "        return x\n",
        "\n",
        "net_gn = Net_gn()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kqYnxEJbegsB"
      },
      "source": [
        "optimizer = optim.SGD(net_gn.parameters(), lr=0.0001, momentum=0.9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ypFg2YsenaP",
        "outputId": "cc3df488-5284-40ab-8af5-5f940f90fe1d"
      },
      "source": [
        "for epoch in range(5):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net_gn(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 500 == 499:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 500))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1,   500] loss: 2.339\n",
            "[1,  1000] loss: 1.467\n",
            "[1,  1500] loss: 1.205\n",
            "[1,  2000] loss: 1.086\n",
            "[1,  2500] loss: 1.054\n",
            "[1,  3000] loss: 0.976\n",
            "[1,  3500] loss: 0.965\n",
            "[1,  4000] loss: 0.885\n",
            "[1,  4500] loss: 0.846\n",
            "[1,  5000] loss: 0.850\n",
            "[1,  5500] loss: 0.790\n",
            "[1,  6000] loss: 0.716\n",
            "[1,  6500] loss: 0.704\n",
            "[1,  7000] loss: 0.689\n",
            "[1,  7500] loss: 0.692\n",
            "[1,  8000] loss: 0.692\n",
            "[1,  8500] loss: 0.686\n",
            "[1,  9000] loss: 0.601\n",
            "[1,  9500] loss: 0.690\n",
            "[1, 10000] loss: 0.642\n",
            "[1, 10500] loss: 0.578\n",
            "[1, 11000] loss: 0.590\n",
            "[1, 11500] loss: 0.573\n",
            "[1, 12000] loss: 0.635\n",
            "[1, 12500] loss: 0.597\n",
            "[1, 13000] loss: 0.578\n",
            "[2,   500] loss: 0.518\n",
            "[2,  1000] loss: 0.545\n",
            "[2,  1500] loss: 0.512\n",
            "[2,  2000] loss: 0.524\n",
            "[2,  2500] loss: 0.554\n",
            "[2,  3000] loss: 0.510\n",
            "[2,  3500] loss: 0.442\n",
            "[2,  4000] loss: 0.486\n",
            "[2,  4500] loss: 0.493\n",
            "[2,  5000] loss: 0.476\n",
            "[2,  5500] loss: 0.495\n",
            "[2,  6000] loss: 0.474\n",
            "[2,  6500] loss: 0.476\n",
            "[2,  7000] loss: 0.485\n",
            "[2,  7500] loss: 0.457\n",
            "[2,  8000] loss: 0.508\n",
            "[2,  8500] loss: 0.526\n",
            "[2,  9000] loss: 0.444\n",
            "[2,  9500] loss: 0.467\n",
            "[2, 10000] loss: 0.462\n",
            "[2, 10500] loss: 0.446\n",
            "[2, 11000] loss: 0.478\n",
            "[2, 11500] loss: 0.490\n",
            "[2, 12000] loss: 0.463\n",
            "[2, 12500] loss: 0.440\n",
            "[2, 13000] loss: 0.486\n",
            "[3,   500] loss: 0.380\n",
            "[3,  1000] loss: 0.429\n",
            "[3,  1500] loss: 0.394\n",
            "[3,  2000] loss: 0.369\n",
            "[3,  2500] loss: 0.410\n",
            "[3,  3000] loss: 0.381\n",
            "[3,  3500] loss: 0.405\n",
            "[3,  4000] loss: 0.362\n",
            "[3,  4500] loss: 0.421\n",
            "[3,  5000] loss: 0.366\n",
            "[3,  5500] loss: 0.435\n",
            "[3,  6000] loss: 0.341\n",
            "[3,  6500] loss: 0.381\n",
            "[3,  7000] loss: 0.434\n",
            "[3,  7500] loss: 0.393\n",
            "[3,  8000] loss: 0.398\n",
            "[3,  8500] loss: 0.427\n",
            "[3,  9000] loss: 0.405\n",
            "[3,  9500] loss: 0.401\n",
            "[3, 10000] loss: 0.406\n",
            "[3, 10500] loss: 0.435\n",
            "[3, 11000] loss: 0.386\n",
            "[3, 11500] loss: 0.373\n",
            "[3, 12000] loss: 0.368\n",
            "[3, 12500] loss: 0.401\n",
            "[3, 13000] loss: 0.356\n",
            "[4,   500] loss: 0.304\n",
            "[4,  1000] loss: 0.345\n",
            "[4,  1500] loss: 0.295\n",
            "[4,  2000] loss: 0.335\n",
            "[4,  2500] loss: 0.337\n",
            "[4,  3000] loss: 0.348\n",
            "[4,  3500] loss: 0.366\n",
            "[4,  4000] loss: 0.325\n",
            "[4,  4500] loss: 0.345\n",
            "[4,  5000] loss: 0.327\n",
            "[4,  5500] loss: 0.308\n",
            "[4,  6000] loss: 0.322\n",
            "[4,  6500] loss: 0.336\n",
            "[4,  7000] loss: 0.342\n",
            "[4,  7500] loss: 0.327\n",
            "[4,  8000] loss: 0.366\n",
            "[4,  8500] loss: 0.318\n",
            "[4,  9000] loss: 0.367\n",
            "[4,  9500] loss: 0.319\n",
            "[4, 10000] loss: 0.327\n",
            "[4, 10500] loss: 0.337\n",
            "[4, 11000] loss: 0.343\n",
            "[4, 11500] loss: 0.344\n",
            "[4, 12000] loss: 0.338\n",
            "[4, 12500] loss: 0.375\n",
            "[4, 13000] loss: 0.316\n",
            "[5,   500] loss: 0.273\n",
            "[5,  1000] loss: 0.270\n",
            "[5,  1500] loss: 0.259\n",
            "[5,  2000] loss: 0.302\n",
            "[5,  2500] loss: 0.283\n",
            "[5,  3000] loss: 0.301\n",
            "[5,  3500] loss: 0.284\n",
            "[5,  4000] loss: 0.292\n",
            "[5,  4500] loss: 0.279\n",
            "[5,  5000] loss: 0.304\n",
            "[5,  5500] loss: 0.304\n",
            "[5,  6000] loss: 0.241\n",
            "[5,  6500] loss: 0.298\n",
            "[5,  7000] loss: 0.324\n",
            "[5,  7500] loss: 0.285\n",
            "[5,  8000] loss: 0.274\n",
            "[5,  8500] loss: 0.269\n",
            "[5,  9000] loss: 0.252\n",
            "[5,  9500] loss: 0.319\n",
            "[5, 10000] loss: 0.308\n",
            "[5, 10500] loss: 0.301\n",
            "[5, 11000] loss: 0.291\n",
            "[5, 11500] loss: 0.296\n",
            "[5, 12000] loss: 0.315\n",
            "[5, 12500] loss: 0.287\n",
            "[5, 13000] loss: 0.297\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PJMHa-PiFdxa",
        "outputId": "b37f90c2-87ed-4b5e-beef-eb6e76b66253"
      },
      "source": [
        "valid_accuracy(net_gn)\n",
        "test_accuracy(net_gn)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the network on the valid images: 87 %\n",
            "Accuracy of the network on the test images: 87 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gdb0BvB4kEj_"
      },
      "source": [
        "С GroupNorm тоже 87%."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wWCym5iRL_b8"
      },
      "source": [
        "### Задание 3    \n",
        "  \n",
        "Обучите модель с точностью (accuracy) на тестовых данных:  \n",
        "- `>= 0.85`    +1 балл\n",
        "- `>= 0.95`    +2 балла\n",
        "- `>= 0.99`    +3 балла  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MqPb524dkMVH"
      },
      "source": [
        "train_loader = torch.utils.data.DataLoader(train_data, batch_size=32, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(train))\n",
        "valid_loader = torch.utils.data.DataLoader(train_data, batch_size=32, num_workers=2,\n",
        "                                           sampler=SubsetRandomSampler(valid))\n",
        "test_loader = torch.utils.data.DataLoader(test_data, batch_size=32,\n",
        "                                          shuffle=True, num_workers=2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UWXlsNOYkDhU"
      },
      "source": [
        "class Net(nn.Module):\n",
        "  def __init__(self):\n",
        "        super(Net, self).__init__()#28*28\n",
        "        self.conv1 = nn.Conv2d(3, 32, 3)#26*26\n",
        "        self.pool = nn.MaxPool2d(2, 2)#13*13\n",
        "        self.conv2 = nn.Conv2d(32, 64, 4)#10*10 -> 5*5\n",
        "        self.fc1 = nn.Linear(64 * 5 * 5, 120)\n",
        "        self.dropout = nn.Dropout(0.3)\n",
        "        self.fc2 = nn.Linear(120, 60)\n",
        "        self.fc3 = nn.Linear(60, 26)\n",
        "\n",
        "\n",
        "  def forward(self, x):\n",
        "        x = self.pool(self.conv1(x))\n",
        "        x = self.pool(F.relu(self.conv2(x)))\n",
        "        x = x.view(-1, 64 * 5 * 5)\n",
        "        x = self.fc1(x)\n",
        "        x = self.dropout(x)\n",
        "        x = F.relu(self.fc2(x))\n",
        "        x = self.fc3(x)\n",
        "\n",
        "\n",
        "        return x\n",
        "\n",
        "net = Net()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WTw1EMMPqGsV"
      },
      "source": [
        "optimizer = optim.Adam(net.parameters(), lr=0.0007)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2S3uS-rrpzL2",
        "outputId": "6cce5c6e-fa87-4c3a-e371-6c434b905f86"
      },
      "source": [
        "for epoch in range(10):\n",
        "    running_loss = 0.0\n",
        "    for i, data in enumerate(train_loader, 0):\n",
        "        # get the inputs; data is a list of [inputs, labels]\n",
        "        inputs, labels = data\n",
        "        #inputs = inputs.float()\n",
        "        #labels = labels.float()\n",
        "        \n",
        "        # zero the parameter gradients\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # forward + backward + optimize\n",
        "        outputs = net(inputs)\n",
        "        \n",
        "        #outputs = outputs.view(-1)\n",
        "        \n",
        "        loss = criterion(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # print statistics\n",
        "        running_loss += loss.item()\n",
        "        if i % 1000 == 999:    \n",
        "            # ...log the running loss\n",
        "            # YOUR CODE\n",
        "            print('[%d, %5d] loss: %.3f' %\n",
        "                  (epoch + 1, i + 1, running_loss / 1000))\n",
        "            running_loss = 0.0\n",
        "\n",
        "print('Finished Training')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1,  1000] loss: 0.118\n",
            "[2,  1000] loss: 0.115\n",
            "[3,  1000] loss: 0.109\n",
            "[4,  1000] loss: 0.108\n",
            "[5,  1000] loss: 0.103\n",
            "[6,  1000] loss: 0.099\n",
            "[7,  1000] loss: 0.101\n",
            "[8,  1000] loss: 0.106\n",
            "[9,  1000] loss: 0.098\n",
            "[10,  1000] loss: 0.095\n",
            "Finished Training\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hrsc8N8bjfu0",
        "outputId": "55239695-5571-4f31-db35-ffbe0f7c4a53"
      },
      "source": [
        "valid_accuracy(net)\n",
        "test_accuracy(net)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the network on the valid images: 91 %\n",
            "Accuracy of the network on the test images: 91 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xFkgeQWtL_b9"
      },
      "source": [
        "## Бонусные задания"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pl865tyaL_b-"
      },
      "source": [
        "**Задание 1 (1 балл).**  \n",
        "\n",
        "Напишите на листке белой бумаги (маркером или ручкой) от 5 разных букв (можно больше 5 букв в целом с повторениями, но должно быть минимум 5 разных) английского алфавита (в датасете есть как прописные, так и строчные буквы). Сфотографируйте букву и приведите её картинку к размеру $28\\times28$ и, желательно, к чёрно-белой палитре цветов. Передайте получившиеся изображения вашей модели и выполните предсказание, оцените результат.  \n",
        "  \n",
        "**Tips:**  \n",
        "- В датасете все буквы занимают практически всё пространство картинки по высоте или ширине (или вместе). Если ваша буква будет слишком маленькой или большой, это может повлиять на результат детекции.\n",
        "- Помните, что буква должна быть белого цвета, а фон - чёрного.\n",
        "- Описание ваших действий при выполнении этого задания (что вы использовали, чтобы привести картинку к нужному виду) категорически приветствуется :)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M7mnWB2pCwbY",
        "outputId": "2d3d8f09-ac41-41b3-ef14-701ed66f37ee"
      },
      "source": [
        "pic = plt.imread('/content/drive/MyDrive/task_letters/f/f.jpg')\n",
        "print(pic.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(28, 28, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "QPsNrrMyC_Py",
        "outputId": "de29338a-6d29-4410-efe4-2687620a79fc"
      },
      "source": [
        "plt.figure(figsize=(2,2))\n",
        "plt.imshow(pic)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 144x144 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oljsxyTUDbyY"
      },
      "source": [
        "transform = transforms.Compose(\n",
        "    [transforms.ToTensor(),\n",
        "     transforms.Resize(size=(28, 28)),\n",
        "     transforms.RandomInvert(p=1),\n",
        "     transforms.RandomRotation(degrees=(270, 270)),\n",
        "     transforms.RandomHorizontalFlip(p=1),\n",
        "     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n",
        "\n",
        "task_data = torchvision.datasets.ImageFolder(root='/content/drive/MyDrive/task_letters', transform=transform)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1z7Xtpn1Kv1K"
      },
      "source": [
        "task_loader = torch.utils.data.DataLoader(task_data, batch_size=5,\n",
        "                                          shuffle=False, num_workers=2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "xCR-P4LfK7yw",
        "outputId": "fc4f40df-5648-4e8b-bc98-5e24822db779"
      },
      "source": [
        "\n",
        "dataiter = iter(task_loader)\n",
        "images, labels = dataiter.next()\n",
        "\n",
        "# show images\n",
        "imshow(torchvision.utils.make_grid(images))\n",
        "# print labels\n",
        "print(' '.join('%5s' % task_data.classes[labels[j]] for j in range(5)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    a     f     j     r     z\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lGK-CFPkLWYw",
        "outputId": "e05e2b1f-5cb4-4daf-ceaf-2a732373cd58"
      },
      "source": [
        "correct = 0\n",
        "total = 0\n",
        "with torch.no_grad():\n",
        "  for data in task_loader:\n",
        "    images, labels = data\n",
        "    outputs = net(images)\n",
        "    _, predicted = torch.max(outputs.data, 1)\n",
        "    total += labels.size(0)\n",
        "    correct += (predicted == labels).sum().item()\n",
        "\n",
        "print('Accuracy of the network on the task images: %d %%' % (\n",
        "    100 * correct / total))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of the network on the task images: 20 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kUoQVhVYL_cE"
      },
      "source": [
        "**Задание 2 (1 балл):**    \n",
        "  \n",
        "Используйте transfer learning подход для решения задачи - дообучите какую-либо модель, предобученную на ImageNet, для классификации рукописных букв. Оцените качество решения.  \n",
        "В качестве предобученой модели можно взять одну из [torchvision models](https://pytorch.org/vision/stable/models.html)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xF8opDVKL_cK"
      },
      "source": [
        "**Задание 3 (1 балл):**  \n",
        "  \n",
        "Добавьте вывод значений функции потерь и accuracy в tensorboard.  \n",
        "Метрики нужно выводить и для обучающей, и для тестовой выборки."
      ]
    }
  ]
}
